from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
import sys
import os

# Ajouter le r√©pertoire parent au path pour importer depuis app.py
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

def require_payment(func):
    """D√©corateur pour v√©rifier que l'utilisateur a pay√© sa mise mensuelle"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            from app import db  # Utiliser la base de donn√©es principale
            
            user_id = update.effective_user.id
            has_paid = db.has_valid_payment(user_id)
            
            if not has_paid:
                await update.message.reply_text(
                    "üö´ Vous devez payer votre mise mensuelle pour participer au concours.\n"
                    "Utilisez /payment pour effectuer le paiement."
                )
                return
            
            return await func(update, context)
        except Exception as e:
            print(f"‚ùå Erreur d√©corateur payment: {e}")
            return await func(update, context)  # Continuer en cas d'erreur
    return wrapper

def require_registration(func):
    """D√©corateur pour v√©rifier que l'utilisateur est enregistr√©"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            from app import db  # Utiliser la base de donn√©es principale
            
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name or "Utilisateur"
            first_name = update.effective_user.first_name or username
            
            # Cr√©er ou r√©cup√©rer l'utilisateur dans la base de donn√©es
            user = db.create_or_get_user(user_id, username, first_name)
            
            if not user:
                await update.message.reply_text(
                    "‚ùå Erreur lors de la cr√©ation du profil. Veuillez r√©essayer."
                )
                return
            
            return await func(update, context)
        except Exception as e:
            print(f"‚ùå Erreur d√©corateur registration: {e}")
            return await func(update, context)  # Continuer en cas d'erreur
    return wrapper
