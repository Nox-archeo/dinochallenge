#!/usr/bin/env python3
"""
Diagnostic pour Bot Telegram 2025
Test de compatibilit√© moderne
"""
import os
import sys
import asyncio
import logging

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_telegram_bot():
    """Test du bot Telegram moderne"""
    try:
        print("üîç TEST BOT TELEGRAM 2025")
        print("=" * 50)
        
        # 1. Variables d'environnement
        print("1Ô∏è‚É£ Variables d'environnement :")
        token = os.environ.get('TELEGRAM_BOT_TOKEN')
        if token:
            print(f"   ‚úÖ TELEGRAM_BOT_TOKEN : {token[:10]}...{token[-10:]}")
        else:
            print("   ‚ùå TELEGRAM_BOT_TOKEN manquant")
            return False
        
        # 2. Test des importations
        print("2Ô∏è‚É£ Test des importations :")
        try:
            import telegram
            print(f"   ‚úÖ telegram : {telegram.__version__}")
            
            from telegram.ext import Application
            print("   ‚úÖ telegram.ext.Application : OK")
            
            from telegram import Update
            from telegram.ext import ContextTypes
            print("   ‚úÖ Types Telegram : OK")
            
        except ImportError as e:
            print(f"   ‚ùå Erreur import : {e}")
            return False
        
        # 3. Test cr√©ation Application moderne
        print("3Ô∏è‚É£ Test cr√©ation Application moderne :")
        try:
            application = Application.builder().token(token).build()
            print("   ‚úÖ Application cr√©√©e avec succ√®s")
            
            # Test initialisation
            await application.initialize()
            print("   ‚úÖ Application initialis√©e")
            
            # Nettoyage
            await application.shutdown()
            print("   ‚úÖ Application ferm√©e proprement")
            
        except Exception as e:
            print(f"   ‚ùå Erreur Application : {e}")
            return False
        
        # 4. Test base de donn√©es
        print("4Ô∏è‚É£ Test base de donn√©es :")
        db_url = os.environ.get('DATABASE_URL')
        if db_url:
            print(f"   ‚úÖ DATABASE_URL configur√©e")
            try:
                import psycopg3
                print("   ‚úÖ psycopg3 disponible")
                
                # Test connexion
                conn = psycopg3.connect(db_url)
                conn.close()
                print("   ‚úÖ Connexion BDD r√©ussie")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur BDD : {e}")
        else:
            print("   ‚ö†Ô∏è DATABASE_URL non configur√©e")
        
        # 5. Test PayPal
        print("5Ô∏è‚É£ Test PayPal :")
        paypal_id = os.environ.get('PAYPAL_CLIENT_ID')
        paypal_secret = os.environ.get('PAYPAL_CLIENT_SECRET')
        
        if paypal_id and paypal_secret:
            print("   ‚úÖ PayPal configur√©")
            try:
                import paypalrestsdk
                print("   ‚úÖ paypalrestsdk disponible")
            except ImportError:
                print("   ‚ö†Ô∏è paypalrestsdk non install√©")
        else:
            print("   ‚ö†Ô∏è PayPal non configur√©")
        
        print("=" * 50)
        print("‚úÖ DIAGNOSTIC R√âUSSI - Bot 2025 pr√™t !")
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR DIAGNOSTIC : {e}")
        return False

def diagnose():
    """Lancer le diagnostic synchrone"""
    return asyncio.run(test_telegram_bot())

if __name__ == "__main__":
    success = diagnose()
    sys.exit(0 if success else 1)
