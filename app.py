#!/usr/bin/env python3
"""
Dino Challenge Bot + API - Bot Telegram et API web pour le jeu Dino
Fonctionnalit√©s :
- Bot Telegram pour interaction utilisateurs
- API REST pour recevoir scores depuis le jeu
- Base de donn√©es PostgreSQL/SQLite
- Syst√®me de classement en temps r√©el
"""

import os
import logging
import asyncio
import re
import sqlite3
import traceback
import fcntl  # Pour le verrouillage de fichier
import tempfile
from datetime import datetime, timezone, timedelta
from typing import Optional, List, Dict
import json

# Imports pour le bot Telegram
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Imports pour l'API web
from flask import Flask, request, jsonify, render_template_string, redirect
from flask_cors import CORS
import threading
import time
import base64

# Imports pour PayPal
import paypalrestsdk
import hmac
import hashlib
import requests
from decimal import Decimal

# Imports pour la base de donn√©es
try:
    # Essayer psycopg3 en premier (plus r√©cent)
    import psycopg
    from psycopg.rows import dict_row
    PSYCOPG_VERSION = 3
except ImportError:
    try:
        # Fallback vers psycopg2
        import psycopg2 as psycopg
        from psycopg2.extras import RealDictCursor
        PSYCOPG_VERSION = 2
    except ImportError:
        raise ImportError("Installer psycopg ou psycopg2-binary")

import sqlite3
from urllib.parse import urlparse

# Configuration des logs
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Log de la version psycopg utilis√©e
if PSYCOPG_VERSION == 3:
    logger.info("üîπ Utilisation de psycopg3")
else:
    logger.info("üîπ Utilisation de psycopg2")

# Configuration depuis les variables d'environnement
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///dino_challenge.db')
ORGANIZER_CHAT_ID = int(os.getenv('ORGANIZER_CHAT_ID', '123456789'))
PORT = int(os.getenv('PORT', 5000))
GAME_URL = os.getenv('GAME_URL', 'https://nox-archeo.github.io/dinochallenge/')

# Configuration PayPal - MODE PRODUCTION
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')
PAYPAL_SECRET_KEY = os.getenv('PAYPAL_SECRET_KEY')
PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'live')  # 'live' par d√©faut = PRODUCTION
PAYPAL_WEBHOOK_URL = 'https://dinochallenge-bot.onrender.com/paypal-webhook'

# URLs PayPal API v2 - PRODUCTION
PAYPAL_BASE_URL = 'https://api-m.paypal.com' if PAYPAL_MODE == 'live' else 'https://api-m.sandbox.paypal.com'

# Prix en CHF (taxes incluses) - MODE PRODUCTION
MONTHLY_PRICE_CHF = Decimal('11.00')  # Prix final en production

# √âtat des utilisateurs pour les conversations (√©dition profil)
user_states = {}

# Configuration PayPal SDK (pour la compatibilit√©) - MODE PRODUCTION
if PAYPAL_CLIENT_ID and PAYPAL_SECRET_KEY:
    paypalrestsdk.configure({
        "mode": PAYPAL_MODE,  # Utilise 'live' par d√©faut
        "client_id": PAYPAL_CLIENT_ID,
        "client_secret": PAYPAL_SECRET_KEY
    })
    logger.info(f"üè≠ PayPal configur√© en mode: {PAYPAL_MODE.upper()}")
    logger.info(f"üîó Base URL PayPal: {PAYPAL_BASE_URL}")

# Variables globales
telegram_app = None
flask_app = Flask(__name__)
CORS(flask_app)  # Permettre les requ√™tes CORS depuis le jeu

class DatabaseManager:
    """Gestionnaire de base de donn√©es - supporte PostgreSQL et SQLite"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.is_postgres = database_url.startswith('postgresql://') or database_url.startswith('postgres://')
        self.init_database()
    
    def get_connection(self):
        """Obtenir une connexion √† la base de donn√©es"""
        if self.is_postgres:
            if PSYCOPG_VERSION == 3:
                # psycopg3 syntax
                return psycopg.connect(self.database_url, row_factory=dict_row)
            else:
                # psycopg2 syntax (fallback)
                return psycopg.connect(self.database_url, cursor_factory=RealDictCursor)
        else:
            # SQLite
            db_path = self.database_url.replace('sqlite:///', '').replace('sqlite://', '')
            conn = sqlite3.connect(db_path)
            conn.row_factory = sqlite3.Row  # Pour avoir des dictionnaires
            return conn
    
    def init_database(self):
        """Initialiser les tables de la base de donn√©es"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    # Tables PostgreSQL
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS users (
                            id SERIAL PRIMARY KEY,
                            telegram_id BIGINT UNIQUE NOT NULL,
                            username VARCHAR(255),
                            first_name VARCHAR(255),
                            display_name VARCHAR(255),
                            email VARCHAR(255),
                            paypal_email VARCHAR(255),
                            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            has_paid_current_month BOOLEAN DEFAULT FALSE,
                            total_attempts_today INTEGER DEFAULT 0,
                            last_attempt_date DATE
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS scores (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            telegram_id BIGINT NOT NULL,
                            score INTEGER NOT NULL,
                            game_date DATE DEFAULT CURRENT_DATE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            month_year VARCHAR(7) NOT NULL
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS payments (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            telegram_id BIGINT NOT NULL,
                            amount DECIMAL(10,2) NOT NULL,
                            currency VARCHAR(3) DEFAULT 'CHF',
                            payment_type VARCHAR(20) DEFAULT 'one_time',
                            payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            month_year VARCHAR(7) NOT NULL,
                            status VARCHAR(20) DEFAULT 'completed',
                            paypal_payment_id VARCHAR(255),
                            paypal_subscription_id VARCHAR(255)
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS subscriptions (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            telegram_id BIGINT NOT NULL,
                            paypal_subscription_id VARCHAR(255) UNIQUE NOT NULL,
                            status VARCHAR(20) DEFAULT 'active',
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            cancelled_at TIMESTAMP,
                            next_billing_date DATE,
                            amount DECIMAL(10,2) NOT NULL,
                            currency VARCHAR(3) DEFAULT 'CHF'
                        )
                    """)
                else:
                    # Tables SQLite
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            telegram_id INTEGER UNIQUE NOT NULL,
                            username TEXT,
                            first_name TEXT,
                            display_name TEXT,
                            email TEXT,
                            paypal_email TEXT,
                            registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                            has_paid_current_month BOOLEAN DEFAULT 0,
                            total_attempts_today INTEGER DEFAULT 0,
                            last_attempt_date DATE
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS scores (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            telegram_id INTEGER NOT NULL,
                            score INTEGER NOT NULL,
                            game_date DATE DEFAULT (DATE('now')),
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            month_year TEXT NOT NULL,
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS payments (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            telegram_id INTEGER NOT NULL,
                            amount REAL NOT NULL,
                            currency TEXT DEFAULT 'CHF',
                            payment_type TEXT DEFAULT 'one_time',
                            payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                            month_year TEXT NOT NULL,
                            status TEXT DEFAULT 'completed',
                            paypal_payment_id TEXT,
                            paypal_subscription_id TEXT,
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS subscriptions (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            telegram_id INTEGER NOT NULL,
                            paypal_subscription_id TEXT UNIQUE NOT NULL,
                            status TEXT DEFAULT 'active',
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            cancelled_at DATETIME,
                            next_billing_date DATE,
                            amount REAL NOT NULL,
                            currency TEXT DEFAULT 'CHF',
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    """)
                
                conn.commit()
                logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
                
                # Migration : ajouter display_name si elle n'existe pas
                try:
                    if self.is_postgres:
                        cursor.execute("""
                            ALTER TABLE users ADD COLUMN IF NOT EXISTS display_name VARCHAR(255)
                        """)
                    else:
                        # Pour SQLite, v√©rifier si la colonne existe
                        cursor.execute("PRAGMA table_info(users)")
                        columns = [column[1] for column in cursor.fetchall()]
                        if 'display_name' not in columns:
                            cursor.execute("ALTER TABLE users ADD COLUMN display_name TEXT")
                    
                    conn.commit()
                    logger.info("‚úÖ Migration display_name termin√©e")
                except Exception as migration_error:
                    logger.info(f"Migration display_name ignor√©e: {migration_error}")

                # Migration : ajouter les colonnes manquantes dans la table payments
                try:
                    if self.is_postgres:
                        # Ajouter payment_type si elle n'existe pas
                        cursor.execute("""
                            ALTER TABLE payments ADD COLUMN IF NOT EXISTS payment_type VARCHAR(20) DEFAULT 'one_time'
                        """)
                        # Ajouter paypal_payment_id si elle n'existe pas
                        cursor.execute("""
                            ALTER TABLE payments ADD COLUMN IF NOT EXISTS paypal_payment_id VARCHAR(255)
                        """)
                        # Ajouter paypal_subscription_id si elle n'existe pas
                        cursor.execute("""
                            ALTER TABLE payments ADD COLUMN IF NOT EXISTS paypal_subscription_id VARCHAR(255)
                        """)
                    else:
                        # Pour SQLite, v√©rifier les colonnes de payments
                        cursor.execute("PRAGMA table_info(payments)")
                        columns = [column[1] for column in cursor.fetchall()]
                        
                        if 'payment_type' not in columns:
                            cursor.execute("ALTER TABLE payments ADD COLUMN payment_type TEXT DEFAULT 'one_time'")
                        if 'paypal_payment_id' not in columns:
                            cursor.execute("ALTER TABLE payments ADD COLUMN paypal_payment_id TEXT")
                        if 'paypal_subscription_id' not in columns:
                            cursor.execute("ALTER TABLE payments ADD COLUMN paypal_subscription_id TEXT")
                    
                    conn.commit()
                    logger.info("‚úÖ Migration table payments termin√©e")
                except Exception as migration_error:
                    logger.info(f"Migration payments ignor√©e: {migration_error}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation base de donn√©es: {e}")
            raise
    
    def create_or_get_user(self, telegram_id: int, username: str = None, first_name: str = None) -> Dict:
        """Cr√©er ou r√©cup√©rer un utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # V√©rifier si l'utilisateur existe
                cursor.execute("SELECT * FROM users WHERE telegram_id = %s" if self.is_postgres else 
                             "SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
                user = cursor.fetchone()
                
                if user:
                    return dict(user)
                
                # Cr√©er nouvel utilisateur
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO users (telegram_id, username, first_name, email)
                        VALUES (%s, %s, %s, %s) RETURNING *
                    """, (telegram_id, username, first_name, username + '@telegram.user' if username else None))
                    user = cursor.fetchone()
                else:
                    cursor.execute("""
                        INSERT INTO users (telegram_id, username, first_name, email)
                        VALUES (?, ?, ?, ?)
                    """, (telegram_id, username, first_name, username + '@telegram.user' if username else None))
                    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
                    user = cursor.fetchone()
                
                conn.commit()
                logger.info(f"‚úÖ Utilisateur cr√©√©: {telegram_id}")
                return dict(user)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation utilisateur: {e}")
            return {}
    
    def add_score(self, telegram_id: int, score: int) -> Dict:
        """Ajouter un score pour un utilisateur avec v√©rifications"""
        try:
            # S'assurer que l'utilisateur existe
            user = self.create_or_get_user(telegram_id)
            if not user:
                return {'success': False, 'error': 'Utilisateur non trouv√©'}
            
            # V√©rifier l'acc√®s premium
            has_access = self.check_user_access(telegram_id)
            if not has_access:
                return {'success': False, 'error': 'Acc√®s premium requis'}

            # V√âRIFIER LA LIMITE AVANT d'ajouter le score
            # Utiliser l'heure fran√ßaise (UTC+2 en √©t√©, UTC+1 en hiver)
            from datetime import timezone, timedelta
            
            # Approximation : UTC+2 pour l'√©t√© fran√ßais (√† ajuster selon la saison)
            france_tz = timezone(timedelta(hours=2))
            today_france = datetime.now(france_tz).date()
            
            print(f"üïê Heure serveur UTC: {datetime.now()}")
            print(f"üá´üá∑ Date fran√ßaise: {today_france}")
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Compter les parties d'aujourd'hui en France AVANT d'ajouter le nouveau score
                cursor.execute("""
                    SELECT COUNT(*) FROM scores 
                    WHERE telegram_id = %s AND DATE(created_at AT TIME ZONE 'Europe/Paris') = %s
                """ if self.is_postgres else """
                    SELECT COUNT(*) FROM scores 
                    WHERE telegram_id = ? AND DATE(created_at, '+2 hours') = ?
                """, (telegram_id, today_france))
                
                result = cursor.fetchone()
                if result:
                    if isinstance(result, dict):
                        daily_games = result['count'] or 0
                    else:
                        daily_games = result[0] if result[0] is not None else 0
                else:
                    daily_games = 0
                
                # Bloquer si d√©j√† 5 parties jou√©es
                if daily_games >= 5:
                    return {
                        'success': False,
                        'daily_games': daily_games,
                        'remaining_games': 0,
                        'limit_reached': True,
                        'error': 'Limite quotidienne atteinte ! Vous avez d√©j√† jou√© 5 parties aujourd\'hui. Revenez demain.',
                        'message': 'Limite quotidienne atteinte ! Revenez demain pour 5 nouvelles parties.'
                    }
                
                # Ajouter le score seulement si moins de 5 parties
                current_month = datetime.now().strftime('%Y-%m')
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO scores (user_id, telegram_id, score, month_year)
                        VALUES (%s, %s, %s, %s)
                    """, (user['id'], telegram_id, score, current_month))
                else:
                    cursor.execute("""
                        INSERT INTO scores (user_id, telegram_id, score, month_year)
                        VALUES (?, ?, ?, ?)
                    """, (user['id'], telegram_id, score, current_month))
                
                daily_games += 1  # Maintenant on a une partie de plus
                conn.commit()
                logger.info(f"‚úÖ Score ajout√©: {telegram_id} = {score} (partie {daily_games}/5)")
                
                # Informer si c'√©tait la 5√®me partie
                if daily_games >= 5:
                    return {
                        'success': True, 
                        'daily_games': daily_games,
                        'remaining_games': 0,
                        'limit_reached': True,
                        'message': 'Limite quotidienne atteinte ! Revenez demain pour 5 nouvelles parties.'
                    }
                else:
                    return {
                        'success': True, 
                        'daily_games': daily_games,
                        'remaining_games': 5 - daily_games,
                        'limit_reached': False
                    }
                
        except Exception as e:
            logger.error(f"‚ùå Erreur ajout score: {e}")
            return False
    
    def get_leaderboard(self, month_year: str = None, limit: int = 10) -> List[Dict]:
        """R√©cup√©rer le classement"""
        if not month_year:
            month_year = datetime.now().strftime('%Y-%m')
        
        logger.info(f"üèÜ R√©cup√©ration classement pour {month_year}, limite: {limit}")
        
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # D'abord, v√©rifier quels scores existent
                cursor.execute("""
                    SELECT telegram_id, score, created_at FROM scores 
                    WHERE month_year = ? ORDER BY telegram_id, score DESC
                """ if not self.is_postgres else """
                    SELECT telegram_id, score, created_at FROM scores 
                    WHERE month_year = %s ORDER BY telegram_id, score DESC
                """, (month_year,))
                
                all_scores = cursor.fetchall()
                logger.info(f"üìä Scores trouv√©s pour {month_year}: {len(all_scores)}")
                for score in all_scores[:10]:  # Log les 10 premiers
                    if self.is_postgres:
                        logger.info(f"  Score: {score['telegram_id']} = {score['score']} ({score['created_at']})")
                    else:
                        logger.info(f"  Score: {score[0]} = {score[1]} ({score[2]})")
                
                if self.is_postgres:
                    cursor.execute("""
                        SELECT 
                            u.telegram_id,
                            COALESCE(u.display_name, u.first_name, u.username, 'Anonyme') as display_name,
                            u.username,
                            MAX(s.score) as best_score,
                            COUNT(s.id) as total_games,
                            u.has_paid_current_month
                        FROM users u
                        JOIN scores s ON u.telegram_id = s.telegram_id
                        WHERE s.month_year = %s 
                          AND (u.has_paid_current_month = TRUE 
                               OR EXISTS (
                                   SELECT 1 FROM payments p 
                                   WHERE p.telegram_id = u.telegram_id 
                                     AND p.month_year = %s 
                                     AND p.status = 'completed'
                               )
                               OR EXISTS (
                                   SELECT 1 FROM subscriptions sub 
                                   WHERE sub.telegram_id = u.telegram_id 
                                     AND sub.status = 'active'
                               ))
                        GROUP BY u.telegram_id, u.display_name, u.first_name, u.username, u.has_paid_current_month
                        ORDER BY best_score DESC
                        LIMIT %s
                    """, (month_year, month_year, limit))
                else:
                    # Requ√™te SQLite avec m√™me filtre d'acc√®s que PostgreSQL
                    cursor.execute("""
                        SELECT 
                            s.telegram_id,
                            COALESCE(u.display_name, u.first_name, u.username, 'Joueur ' || s.telegram_id) as display_name,
                            u.username,
                            MAX(s.score) as best_score,
                            COUNT(s.id) as total_games,
                            COALESCE(u.has_paid_current_month, 0) as has_paid_current_month
                        FROM scores s
                        LEFT JOIN users u ON s.telegram_id = u.telegram_id
                        WHERE s.month_year = ?
                          AND (u.has_paid_current_month = 1 
                               OR EXISTS (
                                   SELECT 1 FROM payments p 
                                   WHERE p.telegram_id = s.telegram_id 
                                     AND p.month_year = ? 
                                     AND p.status = 'completed'
                               )
                               OR EXISTS (
                                   SELECT 1 FROM subscriptions sub 
                                   WHERE sub.telegram_id = s.telegram_id 
                                     AND sub.status = 'active'
                               ))
                        GROUP BY s.telegram_id, u.display_name, u.first_name, u.username, u.has_paid_current_month
                        ORDER BY best_score DESC
                        LIMIT ?
                    """, (month_year, month_year, limit))
                
                results = cursor.fetchall()
                
                logger.info(f"üèÜ R√©sultats classement: {len(results)} joueurs")
                leaderboard_data = []
                for i, row in enumerate(results):
                    if self.is_postgres:
                        player_data = dict(row)
                    else:
                        # Pour SQLite, cr√©er le dict manuellement
                        player_data = {
                            'telegram_id': row[0],
                            'display_name': row[1],
                            'username': row[2],
                            'best_score': row[3],
                            'total_games': row[4],
                            'has_paid_current_month': row[5]
                        }
                    
                    logger.info(f"  #{i+1}: {player_data['display_name']} = {player_data['best_score']} pts ({player_data['total_games']} parties)")
                    leaderboard_data.append(player_data)
                
                return leaderboard_data
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration classement: {e}")
            return []
    
    def record_payment(self, telegram_id: int, amount: Decimal, payment_type: str = 'one_time', 
                      paypal_payment_id: str = None, paypal_subscription_id: str = None) -> bool:
        """Enregistrer un paiement"""
        try:
            user = self.create_or_get_user(telegram_id)
            if not user:
                return False
            
            current_month = datetime.now().strftime('%Y-%m')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO payments (user_id, telegram_id, amount, payment_type, month_year, 
                                            paypal_payment_id, paypal_subscription_id)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (user['id'], telegram_id, amount, payment_type, current_month, 
                         paypal_payment_id, paypal_subscription_id))
                else:
                    cursor.execute("""
                        INSERT INTO payments (user_id, telegram_id, amount, payment_type, month_year,
                                            paypal_payment_id, paypal_subscription_id)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, (user['id'], telegram_id, amount, payment_type, current_month,
                         paypal_payment_id, paypal_subscription_id))
                
                # Mettre √† jour le statut de paiement de l'utilisateur
                if self.is_postgres:
                    cursor.execute("""
                        UPDATE users SET has_paid_current_month = TRUE WHERE telegram_id = %s
                    """, (telegram_id,))
                else:
                    cursor.execute("""
                        UPDATE users SET has_paid_current_month = 1 WHERE telegram_id = ?
                    """, (telegram_id,))
                
                conn.commit()
                logger.info(f"‚úÖ Paiement enregistr√©: {telegram_id} = {amount} CHF ({payment_type})")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur enregistrement paiement: {e}")
            return False
    
    def create_subscription(self, telegram_id: int, paypal_subscription_id: str, 
                          amount: Decimal, next_billing_date: str = None) -> bool:
        """Cr√©er un abonnement"""
        try:
            user = self.create_or_get_user(telegram_id)
            if not user:
                return False
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO subscriptions (user_id, telegram_id, paypal_subscription_id, 
                                                 amount, next_billing_date)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (paypal_subscription_id) DO UPDATE SET
                        status = 'active', next_billing_date = EXCLUDED.next_billing_date
                    """, (user['id'], telegram_id, paypal_subscription_id, amount, next_billing_date))
                else:
                    cursor.execute("""
                        INSERT OR REPLACE INTO subscriptions (user_id, telegram_id, paypal_subscription_id,
                                                            amount, next_billing_date)
                        VALUES (?, ?, ?, ?, ?)
                    """, (user['id'], telegram_id, paypal_subscription_id, amount, next_billing_date))
                
                conn.commit()
                logger.info(f"‚úÖ Abonnement cr√©√©: {telegram_id} = {paypal_subscription_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation abonnement: {e}")
            return False
    
    def cancel_subscription(self, paypal_subscription_id: str) -> bool:
        """Annuler un abonnement"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        UPDATE subscriptions 
                        SET status = 'cancelled', cancelled_at = CURRENT_TIMESTAMP
                        WHERE paypal_subscription_id = %s
                    """, (paypal_subscription_id,))
                else:
                    cursor.execute("""
                        UPDATE subscriptions 
                        SET status = 'cancelled', cancelled_at = CURRENT_TIMESTAMP
                        WHERE paypal_subscription_id = ?
                    """, (paypal_subscription_id,))
                
                conn.commit()
                logger.info(f"‚úÖ Abonnement annul√©: {paypal_subscription_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur annulation abonnement: {e}")
            return False
    
    def check_user_access(self, telegram_id: int) -> bool:
        """V√©rifier si l'utilisateur a acc√®s ce mois-ci"""
        try:
            current_month = datetime.now().strftime('%Y-%m')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # D'abord v√©rifier le champ has_paid_current_month
                cursor.execute("""
                    SELECT has_paid_current_month FROM users 
                    WHERE telegram_id = %s
                """ if self.is_postgres else """
                    SELECT has_paid_current_month FROM users 
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                result = cursor.fetchone()
                if result:
                    if isinstance(result, dict):
                        has_paid = bool(result['has_paid_current_month'])
                    else:
                        has_paid = bool(result[0])
                    
                    if has_paid:
                        logger.info(f"‚úÖ Acc√®s accord√© via has_paid_current_month: {telegram_id}")
                        return True
                
                # V√©rifier les paiements uniques pour ce mois
                cursor.execute("""
                    SELECT COUNT(*) FROM payments 
                    WHERE telegram_id = %s AND month_year = %s AND status = 'completed'
                """ if self.is_postgres else """
                    SELECT COUNT(*) FROM payments 
                    WHERE telegram_id = ? AND month_year = ? AND status = 'completed'
                """, (telegram_id, current_month))
                
                result = cursor.fetchone()
                payment_count = 0
                if result:
                    try:
                        # G√©rer les dictionnaires (PostgreSQL) et les tuples (SQLite)
                        if isinstance(result, dict):
                            # PostgreSQL avec dict_row
                            payment_count = int(result['count'] or 0)
                        else:
                            # SQLite ou tuple
                            payment_count = int(result[0]) if result[0] is not None else 0
                    except (IndexError, TypeError, ValueError, KeyError) as conv_error:
                        logger.warning(f"‚ö†Ô∏è Erreur conversion payment_count: {conv_error}, result: {result}")
                        payment_count = 0
                
                if payment_count > 0:
                    logger.info(f"‚úÖ Acc√®s accord√© via paiement: {telegram_id} ({payment_count} paiements)")
                    return True
                
                # V√©rifier les abonnements actifs
                cursor.execute("""
                    SELECT COUNT(*) FROM subscriptions 
                    WHERE telegram_id = %s AND status = 'active'
                """ if self.is_postgres else """
                    SELECT COUNT(*) FROM subscriptions 
                    WHERE telegram_id = ? AND status = 'active'
                """, (telegram_id,))
                
                result = cursor.fetchone()
                subscription_count = 0
                if result:
                    try:
                        # G√©rer les dictionnaires (PostgreSQL) et les tuples (SQLite)
                        if isinstance(result, dict):
                            # PostgreSQL avec dict_row
                            subscription_count = int(result['count'] or 0)
                        else:
                            # SQLite ou tuple
                            subscription_count = int(result[0]) if result[0] is not None else 0
                    except (IndexError, TypeError, ValueError, KeyError) as conv_error:
                        logger.warning(f"‚ö†Ô∏è Erreur conversion subscription_count: {conv_error}, result: {result}")
                        subscription_count = 0
                
                access_granted = subscription_count > 0
                if access_granted:
                    logger.info(f"‚úÖ Acc√®s accord√© via abonnement: {telegram_id} ({subscription_count} abonnements)")
                else:
                    logger.info(f"‚ùå Aucun acc√®s: {telegram_id} (paiements: {payment_count}, abonnements: {subscription_count})")
                
                return access_granted
                
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification acc√®s: {e}")
            logger.error(f"‚ùå Type d'erreur: {type(e).__name__}")
            logger.error(f"‚ùå Telegram ID: {telegram_id}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return False

    def has_valid_payment(self, telegram_id: int) -> bool:
        """V√©rifier si un utilisateur a un paiement valide pour le mois en cours"""
        try:
            current_month = datetime.now().strftime('%Y-%m')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # V√©rifier s'il y a un paiement pour ce mois
                if self.is_postgres:
                    cursor.execute("""
                        SELECT COUNT(*) FROM payments 
                        WHERE telegram_id = %s 
                        AND month_year = %s
                        AND amount > 0
                    """, (telegram_id, current_month))
                else:
                    cursor.execute("""
                        SELECT COUNT(*) FROM payments 
                        WHERE telegram_id = ? 
                        AND month_year = ?
                        AND amount > 0
                    """, (telegram_id, current_month))
                
                result = cursor.fetchone()
                if result:
                    if isinstance(result, dict):
                        count = int(result['count'] or 0)
                    else:
                        count = int(result[0]) if result[0] is not None else 0
                    
                    has_payment = count > 0
                    logger.info(f"üí∞ Paiement valide pour {telegram_id} en {current_month}: {has_payment} ({count} paiements)")
                    return has_payment
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification paiement: {e}")
            return False

    def get_daily_games_count(self, telegram_id: int, date_str: str = None) -> int:
        """Compter le nombre de parties jou√©es aujourd'hui par un utilisateur"""
        try:
            if date_str is None:
                # Utiliser l'heure fran√ßaise (UTC+2 en √©t√©, UTC+1 en hiver)
                # Approximation: ajouter 2 heures √† UTC pour l'√©t√©
                from datetime import timedelta
                now_utc = datetime.utcnow()
                now_paris = now_utc + timedelta(hours=2)  # Heure d'√©t√© fran√ßaise
                date_str = now_paris.strftime('%Y-%m-%d')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Compter les scores enregistr√©s aujourd'hui
                if self.is_postgres:
                    cursor.execute("""
                        SELECT COUNT(*) FROM scores 
                        WHERE telegram_id = %s 
                        AND DATE(created_at + INTERVAL '2 hours') = %s
                    """, (telegram_id, date_str))
                else:
                    # Pour SQLite, approximation avec UTC (peut √™tre ajust√©e)
                    cursor.execute("""
                        SELECT COUNT(*) FROM scores 
                        WHERE telegram_id = ? 
                        AND DATE(created_at) = ?
                    """, (telegram_id, date_str))
                
                result = cursor.fetchone()
                if result:
                    if isinstance(result, dict):
                        return int(result['count'] or 0)
                    else:
                        return int(result[0]) if result[0] is not None else 0
                
                return 0
                
        except Exception as e:
            logger.error(f"‚ùå Erreur comptage parties quotidiennes: {e}")
            return 0

    def update_display_name(self, telegram_id: int, display_name: str) -> bool:
        """Mettre √† jour le nom d'affichage de l'utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        UPDATE users SET display_name = %s WHERE telegram_id = %s
                    """, (display_name, telegram_id))
                else:
                    cursor.execute("""
                        UPDATE users SET display_name = ? WHERE telegram_id = ?
                    """, (display_name, telegram_id))
                
                conn.commit()
                logger.info(f"‚úÖ Nom d'affichage mis √† jour: {telegram_id} = {display_name}")
                return cursor.rowcount > 0
                
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour nom d'affichage: {e}")
            return False

    def get_user_profile(self, telegram_id: int) -> Dict:
        """R√©cup√©rer le profil complet d'un utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT * FROM users WHERE telegram_id = %s
                """ if self.is_postgres else """
                    SELECT * FROM users WHERE telegram_id = ?
                """, (telegram_id,))
                
                user = cursor.fetchone()
                return dict(user) if user else {}
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration profil: {e}")
            return {}

    def get_user_scores(self, telegram_id: int) -> list:
        """R√©cup√©rer les scores d'un utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT score, created_at FROM scores 
                    WHERE telegram_id = %s 
                    ORDER BY score DESC
                """ if self.is_postgres else """
                    SELECT score, created_at FROM scores 
                    WHERE telegram_id = ? 
                    ORDER BY score DESC
                """, (telegram_id,))
                
                return [dict(row) for row in cursor.fetchall()]
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration scores: {e}")
            return []

    def update_user_profile(self, telegram_id: int, display_name: str = None, paypal_email: str = None) -> bool:
        """Mettre √† jour le profil d'un utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                updates = []
                values = []
                
                if display_name is not None:
                    updates.append("display_name = %s" if self.is_postgres else "display_name = ?")
                    values.append(display_name)
                
                if paypal_email is not None:
                    if paypal_email.lower() == 'supprimer':
                        updates.append("paypal_email = NULL")
                    else:
                        updates.append("paypal_email = %s" if self.is_postgres else "paypal_email = ?")
                        values.append(paypal_email)
                
                if not updates:
                    return True  # Rien √† mettre √† jour
                
                values.append(telegram_id)
                
                query = f"""
                    UPDATE users 
                    SET {', '.join(updates)}
                    WHERE telegram_id = {'%s' if self.is_postgres else '?'}
                """
                
                cursor.execute(query, values)
                return cursor.rowcount > 0
                
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour profil: {e}")
            return False

    def delete_user_profile(self, telegram_id: int) -> bool:
        """Supprimer compl√®tement le profil d'un utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Supprimer dans l'ordre pour respecter les contraintes de cl√©s √©trang√®res
                tables = ['payments', 'scores', 'users']
                
                for table in tables:
                    cursor.execute(f"""
                        DELETE FROM {table} WHERE telegram_id = {'%s' if self.is_postgres else '?'}
                    """, (telegram_id,))
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur suppression profil: {e}")
            return False

    def calculate_monthly_prizes(self, month_year: str = None) -> Dict:
        """Calculer les prix du mois bas√©s sur les paiements"""
        if not month_year:
            month_year = datetime.now().strftime('%Y-%m')
        
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Calculer le total des paiements pour le mois (SEULEMENT les vrais paiements)
                cursor.execute("""
                    SELECT SUM(amount) as total_amount, COUNT(*) as total_players
                    FROM payments 
                    WHERE month_year = %s AND status = 'completed' 
                    AND payment_type NOT IN ('admin_restore', 'test')
                """ if self.is_postgres else """
                    SELECT SUM(amount) as total_amount, COUNT(*) as total_players
                    FROM payments 
                    WHERE month_year = ? AND status = 'completed'
                    AND payment_type NOT IN ('admin_restore', 'test')
                """, (month_year,))
                
                result = cursor.fetchone()
                if not result:
                    total_amount = Decimal('0')
                    total_players = 0
                elif isinstance(result, dict):
                    total_amount = Decimal(str(result['total_amount'] or 0))
                    total_players = result['total_players'] or 0
                else:
                    # Si result est un tuple/liste
                    total_amount = Decimal(str(result[0] or 0))
                    total_players = result[1] or 0
                
                # Calculer les prix selon les pourcentages
                first_prize = total_amount * Decimal('0.40')  # 40%
                second_prize = total_amount * Decimal('0.15')  # 15%
                third_prize = total_amount * Decimal('0.05')   # 5%
                organization_fees = total_amount * Decimal('0.40')  # 40%
                
                return {
                    'month_year': month_year,
                    'total_amount': float(total_amount),
                    'total_players': total_players,
                    'prizes': {
                        'first': float(first_prize),
                        'second': float(second_prize),
                        'third': float(third_prize),
                        'organization_fees': float(organization_fees)
                    }
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erreur calcul prix mensuels: {e}")
            return {
                'month_year': month_year,
                'total_amount': 0,
                'total_players': 0,
                'prizes': {'first': 0, 'second': 0, 'third': 0, 'organization_fees': 0}
            }
    
    def clean_test_payments(self):
        """Nettoyer tous les paiements de test et admin_restore"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Supprimer tous les paiements de test
                cursor.execute("""
                    DELETE FROM payments 
                    WHERE payment_type IN ('admin_restore', 'test')
                    OR paypal_order_id LIKE '%test%'
                    OR paypal_order_id LIKE '%admin%'
                """ if self.is_postgres else """
                    DELETE FROM payments 
                    WHERE payment_type IN ('admin_restore', 'test')
                    OR paypal_order_id LIKE '%test%'
                    OR paypal_order_id LIKE '%admin%'
                """)
                
                deleted_count = cursor.rowcount
                conn.commit()
                logger.info(f"üßπ Nettoyage: {deleted_count} paiements de test supprim√©s")
                return deleted_count
                
        except Exception as e:
            logger.error(f"‚ùå Erreur nettoyage paiements: {e}")
            return 0

    def get_user_position_and_prize(self, telegram_id: int, month_year: str = None) -> Dict:
        """Obtenir la position actuelle d'un utilisateur et son gain potentiel"""
        if not month_year:
            month_year = datetime.now().strftime('%Y-%m')
        
        try:
            # Obtenir le classement complet
            leaderboard = self.get_leaderboard(month_year, 100)  # Top 100 pour √™tre s√ªr
            
            # Calculer les prix du mois
            prize_info = self.calculate_monthly_prizes(month_year)
            
            # Trouver la position de l'utilisateur
            user_position = None
            user_score = 0
            user_prize = 0
            
            for i, player in enumerate(leaderboard):
                if player['telegram_id'] == telegram_id:
                    user_position = i + 1
                    user_score = player['best_score']
                    
                    # Calculer le gain selon la position
                    if user_position == 1:
                        user_prize = prize_info['prizes']['first']
                    elif user_position == 2:
                        user_prize = prize_info['prizes']['second']
                    elif user_position == 3:
                        user_prize = prize_info['prizes']['third']
                    else:
                        user_prize = 0
                    break
            
            return {
                'position': user_position,
                'score': user_score,
                'prize': user_prize,
                'total_players': len(leaderboard),
                'prize_info': prize_info
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur position et prix utilisateur: {e}")
            return {
                'position': None,
                'score': 0,
                'prize': 0,
                'total_players': 0,
                'prize_info': self.calculate_monthly_prizes(month_year)
            }

    def get_monthly_winners(self, month_year: str = None) -> List[Dict]:
        """Obtenir les 3 gagnants du mois"""
        if not month_year:
            # Mois pr√©c√©dent (pour les notifications en fin de mois)
            last_month = datetime.now().replace(day=1) - timedelta(days=1)
            month_year = last_month.strftime('%Y-%m')
        
        try:
            leaderboard = self.get_leaderboard(month_year, 3)  # Top 3
            prize_info = self.calculate_monthly_prizes(month_year)
            
            winners = []
            for i, player in enumerate(leaderboard):
                position = i + 1
                if position == 1:
                    prize = prize_info['prizes']['first']
                elif position == 2:
                    prize = prize_info['prizes']['second']  
                elif position == 3:
                    prize = prize_info['prizes']['third']
                else:
                    continue
                    
                winners.append({
                    'telegram_id': player['telegram_id'],
                    'display_name': player['display_name'],
                    'position': position,
                    'score': player['best_score'],
                    'prize': prize,
                    'month_year': month_year
                })
            
            return winners
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration gagnants: {e}")
            return []

    def reset_monthly_leaderboard(self) -> bool:
        """Reset du classement mensuel (appel√© le 1er de chaque mois)"""
        try:
            current_month = datetime.now().strftime('%Y-%m')
            logger.info(f"üîÑ Reset du classement mensuel pour {current_month}")
            
            # Pas besoin de supprimer les scores, ils sont filtr√©s par month_year
            # Le nouveau mois commence automatiquement
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur reset mensuel: {e}")
            return False

    def get_user_profile_with_paypal(self, telegram_id: int) -> Dict:
        """R√©cup√©rer le profil avec info PayPal pour les paiements"""
        try:
            profile = self.get_user_profile(telegram_id)
            if profile and profile.get('paypal_email'):
                return profile
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur profil PayPal: {e}")
            return None

# Instance globale du gestionnaire de base de donn√©es
db = DatabaseManager(DATABASE_URL)

# =============================================================================
# API WEB FLASK
# =============================================================================

@flask_app.route('/health', methods=['GET'])
def health_check():
    """Point de sant√© pour Render"""
    return jsonify({
        'status': 'ok',
        'bot': 'running',
        'database': 'connected',
        'timestamp': datetime.now().isoformat()
    })

@flask_app.route('/', methods=['GET'])
def home():
    """Page d'accueil avec informations du bot"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü¶ï Dino Challenge Bot</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .header { text-align: center; background: #4CAF50; color: white; padding: 20px; border-radius: 10px; }
            .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
            .endpoint { background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 3px; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ü¶ï Dino Challenge Bot</h1>
            <p>Bot Telegram + API Web pour le jeu Chrome Dino Runner</p>
        </div>
        
        <div class="section">
            <h2>üìä API Endpoints</h2>
            <div class="endpoint"><strong>POST /api/score</strong> - Soumettre un score</div>
            <div class="endpoint"><strong>GET /api/leaderboard</strong> - R√©cup√©rer le classement</div>
            <div class="endpoint"><strong>GET /health</strong> - Status du service</div>
        </div>
        
        <div class="section">
            <h2>üéÆ Jeu</h2>
            <p><a href="{{ game_url }}" target="_blank">Jouer au Dino Challenge ‚Üí</a></p>
        </div>
        
        <div class="section">
            <h2>üì± Bot Telegram</h2>
            <p>Recherchez <strong>@DinoChallenge_Bot</strong> sur Telegram pour participer !</p>
        </div>
    </body>
    </html>
    """
    return render_template_string(html, game_url=GAME_URL)




@flask_app.route('/api/score', methods=['POST'])
def submit_score():
    """Recevoir un score depuis le jeu Dino"""
    try:
        data = request.get_json()
        
        logger.info(f"üì• R√©ception score: {data}")
        
        if not data:
            logger.error("‚ùå Aucune donn√©e re√ßue")
            return jsonify({'error': 'Aucune donn√©e re√ßue'}), 400
        
        telegram_id = data.get('telegram_id') or data.get('user_id')
        score = data.get('score')
        username = data.get('username')
        first_name = data.get('first_name')
        
        logger.info(f"üìä Donn√©es pars√©es: telegram_id={telegram_id}, score={score}, username={username}")
        
        if not telegram_id or score is None:
            logger.error(f"‚ùå Donn√©es manquantes: telegram_id={telegram_id}, score={score}")
            return jsonify({'error': 'telegram_id et score requis'}), 400
        
        # Convertir en entiers
        telegram_id = int(telegram_id)
        score = int(score)
        
        logger.info(f"üéØ Soumission score: {telegram_id} = {score} pts")
        
        # Validation du score
        if score < 0:
            logger.error(f"‚ùå Score invalide: {score}")
            return jsonify({'error': 'Score invalide'}), 400
        
        # Sauvegarder le score
        result = db.add_score(telegram_id, score)
        logger.info(f"üíæ R√©sultat sauvegarde: {result}")
        
        if result['success']:
            # Notifier le bot Telegram si possible (compatible Flask)
            if telegram_app:
                def run_score_notification():
                    try:
                        asyncio.run(notify_new_score(telegram_id, score))
                    except Exception as notif_error:
                        logger.error(f"‚ùå Erreur notification score: {notif_error}")
                
                notification_thread = threading.Thread(target=run_score_notification)
                notification_thread.daemon = True
                notification_thread.start()
            
            return jsonify({
                'success': True,
                'message': 'Score enregistr√© avec succ√®s',
                'score': score,
                'telegram_id': telegram_id,
                'daily_games': result.get('daily_games', 1),
                'remaining_games': result.get('remaining_games', 4)
            })
        else:
            return jsonify({'error': result.get('error', 'Erreur lors de l\'enregistrement')}), 400
            
    except Exception as e:
        logger.error(f"‚ùå Erreur soumission score: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/reset-leaderboard', methods=['DELETE'])
def reset_leaderboard():
    """Reset complet du classement - ATTENTION: efface tous les scores"""
    try:
        data = request.get_json()
        if not data or data.get('confirm') != True:
            return jsonify({'error': 'Confirmation requise: {"confirm": true}'}), 400
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # Supprimer tous les scores
            cursor.execute("DELETE FROM scores")
            
            if db.is_postgres:
                # Reset de la s√©quence PostgreSQL
                cursor.execute("ALTER SEQUENCE scores_id_seq RESTART WITH 1")
            
            conn.commit()
            
        logger.info("üóëÔ∏è RESET CLASSEMENT: Tous les scores supprim√©s")
        return jsonify({
            'success': True,
            'message': 'Classement remis √† z√©ro - tous les scores supprim√©s'
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur reset classement: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/api/leaderboard', methods=['GET'])
def get_leaderboard():
    """R√©cup√©rer le classement actuel"""
    try:
        month_year = request.args.get('month', datetime.now().strftime('%Y-%m'))
        limit = int(request.args.get('limit', 10))
        
        leaderboard = db.get_leaderboard(month_year, limit)
        
        # Ajouter les positions
        for i, player in enumerate(leaderboard):
            player['position'] = i + 1
        
        return jsonify({
            'leaderboard': leaderboard,
            'month': month_year,
            'total_players': len(leaderboard)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration classement: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/api/check_access', methods=['GET'])
def check_game_access():
    """V√©rifier l'acc√®s au jeu pour un utilisateur"""
    try:
        telegram_id = request.args.get('telegram_id')
        mode = request.args.get('mode', 'demo')
        
        logger.info(f"üéÆ V√©rification acc√®s - telegram_id: {telegram_id}, mode: {mode}")
        
        # Validation des param√®tres
        if not telegram_id:
            logger.warning("‚ö†Ô∏è telegram_id manquant, mode d√©mo activ√©")
            return jsonify({
                'can_play': True,
                'mode': 'demo',
                'unlimited': True,
                'message': 'Mode d√©mo - acc√®s illimit√©'
            })
        
        try:
            telegram_id = int(telegram_id)
        except ValueError:
            logger.warning(f"‚ö†Ô∏è telegram_id invalide: {telegram_id}, mode d√©mo activ√©")
            return jsonify({
                'can_play': True,
                'mode': 'demo',
                'unlimited': True,
                'message': 'Mode d√©mo - acc√®s illimit√©'
            })
        
        # En mode d√©mo, tout le monde peut jouer
        if mode == 'demo':
            logger.info(f"‚úÖ Mode d√©mo autoris√© pour {telegram_id}")
            return jsonify({
                'can_play': True,
                'mode': 'demo',
                'unlimited': True,
                'message': 'Mode d√©mo - acc√®s illimit√©'
            })
        
        # En mode comp√©tition, v√©rifier l'acc√®s
        try:
            # V√©rifier si l'utilisateur a un paiement valide dans la base de donn√©es
            has_access = db.has_valid_payment(telegram_id)
            logger.info(f"üí∞ Statut paiement pour {telegram_id}: {has_access}")
            
            if not has_access:
                return jsonify({
                    'can_play': False,
                    'mode': mode,
                    'error': 'Acc√®s refus√©',
                    'message': 'Effectuez un paiement pour jouer'
                }), 402
            
            # V√©rifier la limite quotidienne de 5 parties en mode comp√©tition
            daily_games = db.get_daily_games_count(telegram_id)
            max_daily_games = 5  # Limite de 5 parties par jour
            
            remaining_games = max_daily_games - daily_games
            limit_reached = remaining_games <= 0
            
            logger.info(f"üìä Parties quotidiennes pour {telegram_id}: {daily_games}/5 (restantes: {remaining_games})")
            
            if limit_reached:
                return jsonify({
                    'can_play': False,
                    'mode': mode,
                    'unlimited': False,
                    'daily_games': daily_games,
                    'remaining_games': 0,
                    'limit_reached': True,
                    'error': 'Limite quotidienne atteinte',
                    'message': 'Vous avez atteint votre limite de 5 parties par jour. Revenez demain !'
                }), 429
            
            # Utilisateur payant avec parties restantes
            return jsonify({
                'can_play': True,
                'mode': mode,
                'unlimited': False,
                'daily_games': daily_games,
                'remaining_games': remaining_games,
                'limit_reached': False,
                'message': f'Parties restantes aujourd\'hui: {remaining_games}/5'
            })
            
        except Exception as access_error:
            logger.error(f"‚ùå Erreur v√©rification acc√®s: {access_error}")
            # En cas d'erreur, basculer en mode d√©mo
            return jsonify({
                'can_play': True,
                'mode': 'demo',
                'unlimited': True,
                'error': 'Erreur serveur, mode d√©mo activ√©'
            })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique v√©rification acc√®s: {e}")
        # En cas d'erreur critique, autoriser le mode d√©mo
        return jsonify({
            'can_play': True,
            'mode': 'demo',
            'unlimited': True,
            'error': 'Erreur serveur, mode d√©mo activ√©'
        })

# FONCTIONS PAYPAL API V2
# =============================================================================

def get_paypal_access_token():
    """Obtenir un token d'acc√®s PayPal"""
    try:
        logger.info(f"üîç Demande token PayPal - Mode: {PAYPAL_MODE}")
        logger.info(f"üîç URL: {PAYPAL_BASE_URL}/v1/oauth2/token")
        logger.info(f"üîç Client ID pr√©sent: {'Oui' if PAYPAL_CLIENT_ID else 'Non'}")
        logger.info(f"üîç Secret pr√©sent: {'Oui' if PAYPAL_SECRET_KEY else 'Non'}")
        
        url = f"{PAYPAL_BASE_URL}/v1/oauth2/token"
        
        headers = {
            'Accept': 'application/json',
            'Accept-Language': 'en_US',
        }
        
        auth = (PAYPAL_CLIENT_ID, PAYPAL_SECRET_KEY)
        data = {'grant_type': 'client_credentials'}
        
        logger.info(f"üîÑ Envoi requ√™te token PayPal...")
        response = requests.post(url, headers=headers, data=data, auth=auth)
        
        logger.info(f"üì• R√©ponse token - Status: {response.status_code}")
        logger.info(f"üì• R√©ponse token - Content: {response.text}")
        
        if response.status_code == 200:
            token = response.json().get('access_token')
            logger.info(f"‚úÖ Token PayPal obtenu avec succ√®s")
            return token
        else:
            logger.error(f"‚ùå Erreur token PayPal: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur get_paypal_access_token: {e}")
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return None

def create_paypal_order(telegram_id: int, amount: Decimal, currency: str = 'CHF'):
    """Cr√©er une commande PayPal v2 (supporte cartes bancaires)"""
    try:
        logger.info(f"üîç D√©but cr√©ation commande PayPal - telegram_id: {telegram_id}, amount: {amount}")
        
        access_token = get_paypal_access_token()
        if not access_token:
            logger.error("‚ùå Token PayPal manquant")
            return None
        
        logger.info(f"‚úÖ Token PayPal obtenu: {access_token[:20]}...")
        
        url = f"{PAYPAL_BASE_URL}/v2/checkout/orders"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
            'PayPal-Request-Id': f'dino_{telegram_id}_{int(time.time())}'
        }
        
        # Donn√©es de la commande avec structure PayPal v2 correcte
        order_data = {
            "intent": "CAPTURE",
            "purchase_units": [{
                "reference_id": f"dino_monthly_{telegram_id}",
                "amount": {
                    "currency_code": currency,
                    "value": str(amount)
                },
                "description": f"Dino Challenge - Acc√®s mensuel pour {datetime.now().strftime('%B %Y')}"
            }],
            "payment_source": {
                "paypal": {
                    "experience_context": {
                        "payment_method_preference": "UNRESTRICTED",
                        "user_action": "PAY_NOW"
                    }
                }
            },
            "application_context": {
                "brand_name": "Dino Challenge",
                "locale": "fr-CH",
                "landing_page": "BILLING",  # Force l'affichage des options de paiement
                "shipping_preference": "NO_SHIPPING",
                "payment_method_preference": "UNRESTRICTED",  # Permet tous types de paiements
                "return_url": f"https://dinochallenge-bot.onrender.com/payment-success?telegram_id={telegram_id}",
                "cancel_url": f"{GAME_URL}?payment=cancelled"
            }
        }
        
        logger.info(f"üîÑ Envoi requ√™te PayPal vers: {url}")
        logger.info(f"üîÑ Headers: {headers}")
        logger.info(f"üîÑ Data: {json.dumps(order_data, indent=2)}")
        
        response = requests.post(url, headers=headers, json=order_data)
        
        logger.info(f"üì• R√©ponse PayPal - Status: {response.status_code}")
        logger.info(f"üì• R√©ponse PayPal - Headers: {dict(response.headers)}")
        logger.info(f"üì• R√©ponse PayPal - Content: {response.text}")
        
        # PayPal peut renvoyer 200 ou 201 pour une commande cr√©√©e avec succ√®s
        if response.status_code in [200, 201]:
            order = response.json()
            order_id = order.get('id')
            order_status = order.get('status')
            
            logger.info(f"‚úÖ Commande PayPal cr√©√©e: {order_id} - Status: {order_status}")
            
            # V√©rifier que les liens utilisent l'environnement PRODUCTION
            for link in order.get('links', []):
                rel = link.get('rel')
                if rel in ['approve', 'payer-action']:
                    approve_url = link.get('href', '')
                    if PAYPAL_MODE == 'live' and 'paypal.com' in approve_url and 'sandbox' not in approve_url:
                        logger.info(f"‚úÖ URL d'approbation PRODUCTION ({rel}): {approve_url}")
                    elif PAYPAL_MODE == 'sandbox' and 'sandbox.paypal.com' in approve_url:
                        logger.info(f"‚úÖ URL d'approbation SANDBOX ({rel}): {approve_url}")
                    else:
                        logger.warning(f"‚ö†Ô∏è URL d'approbation inattendue ({rel}): {approve_url}")
            return order
        else:
            logger.error(f"‚ùå Erreur cr√©ation commande PayPal ({response.status_code}): {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur create_paypal_order: {e}")
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return None

# =============================================================================
# ENDPOINTS PAYPAL
# =============================================================================

@flask_app.route('/create-payment', methods=['GET', 'POST'])
def create_payment():
    """Cr√©er un paiement unique PayPal avec support carte bancaire"""
    try:
        # G√©rer les requ√™tes GET (depuis les liens Telegram)
        if request.method == 'GET':
            telegram_id = request.args.get('telegram_id')
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
            # Traiter comme une requ√™te POST avec les donn√©es de l'URL
            data = {'telegram_id': telegram_id}
        else:
            # Requ√™te POST normale
            data = request.get_json()
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
        
        # Cr√©er la commande PayPal v2 (supporte cartes bancaires)
        order = create_paypal_order(int(telegram_id), MONTHLY_PRICE_CHF)
        
        if order:
            # Trouver l'URL d'approbation (peut √™tre 'approve' ou 'payer-action')
            approval_url = None
            for link in order.get('links', []):
                rel = link.get('rel')
                if rel == 'approve' or rel == 'payer-action':
                    approval_url = link.get('href')
                    break
            
            if approval_url:
                # Si c'est une requ√™te GET, rediriger directement vers PayPal
                if request.method == 'GET':
                    return redirect(approval_url)
                
                # Si c'est une requ√™te POST, retourner le JSON
                return jsonify({
                    'order_id': order['id'],
                    'approval_url': approval_url,
                    'telegram_id': telegram_id,
                    'status': order['status']
                })
            else:
                return jsonify({'error': 'URL d\'approbation non trouv√©e'}), 500
        else:
            return jsonify({'error': 'Erreur cr√©ation commande PayPal'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint create-payment: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/capture-payment', methods=['POST'])
def capture_payment():
    """Capturer un paiement PayPal apr√®s approbation"""
    try:
        data = request.get_json()
        order_id = data.get('order_id')
        telegram_id_from_request = data.get('telegram_id')  # ID re√ßu depuis le frontend
        
        if not order_id:
            return jsonify({'error': 'order_id requis'}), 400
        
        logger.info(f"üîç Capture paiement - order_id: {order_id}, telegram_id_request: {telegram_id_from_request}")
        
        # Capturer le paiement
        access_token = get_paypal_access_token()
        if not access_token:
            return jsonify({'error': 'Erreur authentification PayPal'}), 500
        
        url = f"{PAYPAL_BASE_URL}/v2/checkout/orders/{order_id}/capture"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
        }
        
        response = requests.post(url, headers=headers, json={})
        
        if response.status_code == 201:
            capture_data = response.json()
            logger.info(f"‚úÖ Paiement captur√©: {order_id}")
            
            # Extraire les informations du paiement
            purchase_unit = capture_data.get('purchase_units', [{}])[0]
            capture = purchase_unit.get('payments', {}).get('captures', [{}])[0]
            amount = Decimal(capture.get('amount', {}).get('value', '0'))
            
            # Prioriser le telegram_id re√ßu depuis le frontend, sinon extraire du reference_id
            telegram_id = None
            if telegram_id_from_request:
                try:
                    telegram_id = int(telegram_id_from_request)
                    logger.info(f"‚úÖ Utilisation telegram_id depuis requ√™te: {telegram_id}")
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è telegram_id invalide depuis requ√™te: {telegram_id_from_request}")
            
            # Fallback: extraire depuis reference_id si pas fourni en requ√™te
            if not telegram_id:
                reference_id = purchase_unit.get('reference_id', '')
                if reference_id.startswith('dino_monthly_'):
                    try:
                        telegram_id = int(reference_id.replace('dino_monthly_', ''))
                        logger.info(f"‚úÖ Utilisation telegram_id depuis reference_id: {telegram_id}")
                    except ValueError:
                        logger.error(f"‚ùå reference_id invalide: {reference_id}")
            
            if telegram_id and amount >= MONTHLY_PRICE_CHF:
                logger.info(f"üîÑ Enregistrement paiement: {telegram_id} = {amount} CHF")
                # Enregistrer le paiement
                success = db.record_payment(
                    telegram_id=telegram_id,
                    amount=amount,
                    payment_type='one_time',
                    paypal_payment_id=order_id
                )
                
                if success:
                    # Notifier l'utilisateur en arri√®re-plan (compatible Flask)
                    if telegram_app:
                        # Utiliser threading pour ex√©cuter la notification async dans Flask
                        import threading
                        def run_notification():
                            try:
                                asyncio.run(notify_payment_success(telegram_id, amount, 'paiement'))
                            except Exception as notif_error:
                                logger.error(f"‚ùå Erreur notification paiement: {notif_error}")
                        
                        notification_thread = threading.Thread(target=run_notification)
                        notification_thread.daemon = True
                        notification_thread.start()
                    
                    return jsonify({
                        'success': True,
                        'order_id': order_id,
                        'amount': str(amount),
                        'telegram_id': telegram_id
                    })
                else:
                    return jsonify({'error': 'Erreur enregistrement paiement'}), 500
            else:
                return jsonify({'error': 'Donn√©es de paiement invalides'}), 400
        else:
            logger.error(f"‚ùå Erreur capture PayPal: {response.text}")
            return jsonify({'error': 'Erreur capture paiement'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint capture-payment: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/payment-success', methods=['GET'])
def payment_success():
    """Page de confirmation de paiement avec capture automatique"""
    telegram_id = request.args.get('telegram_id')
    token = request.args.get('token')  # PayPal order ID
    
    if not telegram_id or not token:
        return "‚ùå Param√®tres manquants", 400
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü¶ï Paiement Dino Challenge</title>
        <meta charset="utf-8">
        <style>
            body {{ 
                font-family: Arial, sans-serif; 
                max-width: 600px; 
                margin: 0 auto; 
                padding: 20px;
                text-align: center;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }}
            .container {{
                background: rgba(255,255,255,0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
            }}
            .loading {{
                animation: spin 2s linear infinite;
                font-size: 3em;
                margin: 20px 0;
            }}
            @keyframes spin {{
                0% {{ transform: rotate(0deg); }}
                100% {{ transform: rotate(360deg); }}
            }}
            .success {{
                color: #4CAF50;
                font-size: 4em;
                margin: 20px 0;
            }}
            .error {{
                color: #f44336;
                font-size: 3em;
                margin: 20px 0;
            }}
            .btn {{
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 25px;
                font-size: 16px;
                cursor: pointer;
                text-decoration: none;
                display: inline-block;
                margin: 10px;
            }}
            .btn:hover {{
                background: #45a049;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü¶ï Dino Challenge</h1>
            <div id="loading">
                <div class="loading">‚ü≥</div>
                <h2>Finalisation de votre paiement...</h2>
                <p>Veuillez patienter, nous confirmons votre paiement.</p>
            </div>
            
            <div id="success" style="display: none;">
                <div class="success">‚úÖ</div>
                <h2>Paiement confirm√© !</h2>
                <p>Votre acc√®s au Dino Challenge est maintenant activ√© !</p>
                <a href="{GAME_URL}?telegram_id={telegram_id}&mode=competition" class="btn">üéÆ Jouer maintenant en mode class√©</a>
                <p><small>Vous pouvez fermer cette page</small></p>
            </div>
            
            <div id="error" style="display: none;">
                <div class="error">‚ùå</div>
                <h2>Erreur de paiement</h2>
                <p id="error-message">Une erreur est survenue lors de la confirmation.</p>
                <a href="javascript:location.reload()" class="btn">üîÑ R√©essayer</a>
            </div>
        </div>
        
        <script>
            async function capturePayment() {{
                try {{
                    const response = await fetch('/capture-payment', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify({{
                            order_id: '{token}',
                            telegram_id: '{telegram_id}'
                        }})
                    }});
                    
                    const data = await response.json();
                    
                    if (data.success) {{
                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('success').style.display = 'block';
                        
                        // Rediriger vers le jeu apr√®s 3 secondes
                        setTimeout(() => {{
                            window.location.href = '{GAME_URL}?telegram_id={telegram_id}&mode=competition&payment=success';
                        }}, 3000);
                    }} else {{
                        throw new Error(data.error || 'Erreur inconnue');
                    }}
                }} catch (error) {{
                    console.error('Erreur:', error);
                    document.getElementById('loading').style.display = 'none';
                    document.getElementById('error').style.display = 'block';
                    document.getElementById('error-message').textContent = error.message;
                }}
            }}
            
            // Capturer le paiement automatiquement au chargement
            window.onload = function() {{
                setTimeout(capturePayment, 1000);
            }};
        </script>
    </body>
    </html>
    """
    
    return html

@flask_app.route('/create-subscription', methods=['GET', 'POST'])
def create_subscription():
    """Cr√©er un abonnement mensuel PayPal v2"""
    try:
        # G√©rer les requ√™tes GET (depuis les liens Telegram)
        if request.method == 'GET':
            telegram_id = request.args.get('telegram_id')
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
        else:
            # Requ√™te POST normale
            data = request.get_json()
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
        
        logger.info(f"üîÑ Cr√©ation abonnement PayPal v2 pour {telegram_id}")
        
        # Cr√©er le plan d'abonnement (si pas d√©j√† cr√©√©)
        plan_id = create_subscription_plan()
        if not plan_id:
            return jsonify({'error': 'Erreur cr√©ation plan abonnement'}), 500
        
        # Cr√©er l'abonnement
        subscription_data = create_paypal_subscription(telegram_id, plan_id)
        if not subscription_data:
            return jsonify({'error': 'Erreur cr√©ation abonnement'}), 500
        
        # Si c'est une requ√™te GET, rediriger directement vers PayPal
        if request.method == 'GET':
            return redirect(subscription_data['approval_url'])
        
        # Si c'est une requ√™te POST, retourner le JSON
        return jsonify(subscription_data)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint create-subscription: {e}")
        return jsonify({'error': str(e)}), 500

def create_subscription_plan():
    """Cr√©er un plan d'abonnement PayPal v2"""
    try:
        logger.info(f"üîç Cr√©ation plan abonnement PayPal v2")
        
        # D'abord cr√©er le produit si n√©cessaire
        product_id = create_paypal_product()
        if not product_id:
            logger.error("‚ùå Impossible de cr√©er le produit PayPal")
            return None
        
        access_token = get_paypal_access_token()
        if not access_token:
            logger.error("‚ùå Token PayPal manquant pour plan")
            return None
        
        url = f"{PAYPAL_BASE_URL}/v1/billing/plans"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
            'PayPal-Request-Id': f'plan_dino_{int(time.time())}'
        }
        
        plan_data = {
            "product_id": product_id,
            "name": "Dino Challenge - Abonnement Mensuel",
            "description": "Acc√®s mensuel au jeu Dino Challenge avec classement",
            "status": "ACTIVE",
            "billing_cycles": [
                {
                    "frequency": {
                        "interval_unit": "MONTH",
                        "interval_count": 1
                    },
                    "tenure_type": "REGULAR",
                    "sequence": 1,
                    "total_cycles": 0,  # 0 = infini
                    "pricing_scheme": {
                        "fixed_price": {
                            "value": str(MONTHLY_PRICE_CHF),
                            "currency_code": "CHF"
                        }
                    }
                }
            ],
            "payment_preferences": {
                "auto_bill_outstanding": True,
                "setup_fee": {
                    "value": "0",
                    "currency_code": "CHF"
                },
                "setup_fee_failure_action": "CONTINUE",
                "payment_failure_threshold": 3
            }
        }
        
        response = requests.post(url, headers=headers, json=plan_data)
        
        if response.status_code == 201:
            plan = response.json()
            plan_id = plan['id']
            logger.info(f"‚úÖ Plan abonnement cr√©√©: {plan_id}")
            return plan_id
        else:
            logger.error(f"‚ùå Erreur cr√©ation plan: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur create_subscription_plan: {e}")
        return None

def create_paypal_product():
    """Cr√©er un produit PayPal v2 pour l'abonnement"""
    try:
        logger.info(f"üîç Cr√©ation produit PayPal v2")
        
        access_token = get_paypal_access_token()
        if not access_token:
            logger.error("‚ùå Token PayPal manquant pour produit")
            return None
        
        url = f"{PAYPAL_BASE_URL}/v1/catalogs/products"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
            'PayPal-Request-Id': f'product_dino_{int(time.time())}'
        }
        
        product_data = {
            "id": "DINO_CHALLENGE_PRODUCT",
            "name": "Dino Challenge - Jeu Premium",
            "description": "Acc√®s premium au jeu Dino Challenge avec classements mensuels et prix",
            "type": "SERVICE",
            "category": "SOFTWARE",
            "image_url": "https://dinochallenge-bot.onrender.com/assets/offline-sprite-1x.png",
            "home_url": GAME_URL
        }
        
        response = requests.post(url, headers=headers, json=product_data)
        
        if response.status_code == 201:
            product = response.json()
            product_id = product['id']
            logger.info(f"‚úÖ Produit PayPal cr√©√©: {product_id}")
            return product_id
        elif response.status_code == 409:
            # Produit existe d√©j√†
            logger.info(f"‚úÖ Produit PayPal existe d√©j√†: DINO_CHALLENGE_PRODUCT")
            return "DINO_CHALLENGE_PRODUCT"
        else:
            logger.error(f"‚ùå Erreur cr√©ation produit: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur create_paypal_product: {e}")
        return None

def create_paypal_subscription(telegram_id: int, plan_id: str):
    """Cr√©er un abonnement PayPal v2"""
    try:
        logger.info(f"üîç Cr√©ation abonnement PayPal v2 - telegram_id: {telegram_id}, plan: {plan_id}")
        
        access_token = get_paypal_access_token()
        if not access_token:
            logger.error("‚ùå Token PayPal manquant pour abonnement")
            return None
        
        url = f"{PAYPAL_BASE_URL}/v1/billing/subscriptions"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
            'PayPal-Request-Id': f'sub_dino_{telegram_id}_{int(time.time())}'
        }
        
        subscription_data = {
            "plan_id": plan_id,
            "start_time": (datetime.utcnow() + timedelta(minutes=1)).isoformat() + "Z",
            "custom_id": f"dino_user_{telegram_id}",
            "application_context": {
                "brand_name": "Dino Challenge",
                "locale": "fr-CH",
                "shipping_preference": "NO_SHIPPING",
                "user_action": "SUBSCRIBE_NOW",
                "return_url": f"{GAME_URL}?telegram_id={telegram_id}&subscription=success",
                "cancel_url": f"{GAME_URL}?telegram_id={telegram_id}&subscription=cancelled"
            }
        }
        
        response = requests.post(url, headers=headers, json=subscription_data)
        
        if response.status_code == 201:
            subscription = response.json()
            subscription_id = subscription['id']
            
            # Trouver l'URL d'approbation
            approval_url = None
            for link in subscription.get('links', []):
                if link['rel'] == 'approve':
                    approval_url = link['href']
                    break
            
            logger.info(f"‚úÖ Abonnement cr√©√©: {subscription_id}")
            
            return {
                'subscription_id': subscription_id,
                'approval_url': approval_url,
                'telegram_id': telegram_id,
                'plan_id': plan_id
            }
        else:
            logger.error(f"‚ùå Erreur cr√©ation abonnement: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur create_paypal_subscription: {e}")
        return None

@flask_app.route('/paypal-webhook', methods=['POST'])
def paypal_webhook():
    """Webhook PayPal pour traiter les √©v√©nements de paiement"""
    try:
        # R√©cup√©rer les donn√©es du webhook
        webhook_data = request.get_json()
        event_type = webhook_data.get('event_type')
        
        logger.info(f"üîî Webhook PayPal re√ßu: {event_type}")
        
        # Traiter selon le type d'√©v√©nement
        if event_type == 'PAYMENT.SALE.COMPLETED':
            # Paiement unique compl√©t√©
            handle_payment_completed(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.CREATED':
            # Abonnement cr√©√©
            handle_subscription_created(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.ACTIVATED':
            # Abonnement activ√©
            handle_subscription_activated(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.CANCELLED':
            # Abonnement annul√©
            handle_subscription_cancelled(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.PAYMENT.COMPLETED':
            # Paiement d'abonnement compl√©t√©
            handle_subscription_payment_completed(webhook_data)
            
        return jsonify({'status': 'success'}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur webhook PayPal: {e}")
        return jsonify({'error': str(e)}), 500

def handle_payment_completed(webhook_data):
    """Traiter un paiement unique compl√©t√©"""
    try:
        resource = webhook_data.get('resource', {})
        payment_id = resource.get('id')
        amount = Decimal(resource.get('amount', {}).get('total', '0'))
        
        # Extraire telegram_id depuis la description ou les items
        telegram_id = extract_telegram_id_from_payment(resource)
        
        if telegram_id and amount >= MONTHLY_PRICE_CHF:
            # Enregistrer le paiement
            success = db.record_payment(
                telegram_id=telegram_id,
                amount=amount,
                payment_type='one_time',
                paypal_payment_id=payment_id
            )
            
            if success:
                # Notifier l'utilisateur (compatible Flask)
                def run_payment_notification():
                    try:
                        asyncio.run(notify_payment_success(telegram_id, amount, 'paiement'))
                    except Exception as notif_error:
                        logger.error(f"‚ùå Erreur notification paiement webhook: {notif_error}")
                
                notification_thread = threading.Thread(target=run_payment_notification)
                notification_thread.daemon = True
                notification_thread.start()
                logger.info(f"‚úÖ Paiement unique trait√©: {telegram_id} = {amount} CHF")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_payment_completed: {e}")

def handle_subscription_created(webhook_data):
    """Traiter la cr√©ation d'abonnement"""
    try:
        resource = webhook_data.get('resource', {})
        subscription_id = resource.get('id')
        
        logger.info(f"üìù Abonnement cr√©√©: {subscription_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_created: {e}")

def handle_subscription_activated(webhook_data):
    """Traiter l'activation d'abonnement"""
    try:
        resource = webhook_data.get('resource', {})
        subscription_id = resource.get('id')
        
        # Extraire telegram_id depuis les m√©tadonn√©es
        telegram_id = extract_telegram_id_from_subscription(resource)
        
        if telegram_id:
            success = db.create_subscription(
                telegram_id=telegram_id,
                paypal_subscription_id=subscription_id,
                amount=MONTHLY_PRICE_CHF
            )
            
            if success:
                # Enregistrer le premier paiement
                db.record_payment(
                    telegram_id=telegram_id,
                    amount=MONTHLY_PRICE_CHF,
                    payment_type='subscription',
                    paypal_subscription_id=subscription_id
                )
                
                # Notifier l'utilisateur (compatible Flask)
                def run_subscription_notification():
                    try:
                        asyncio.run(notify_payment_success(telegram_id, MONTHLY_PRICE_CHF, 'abonnement'))
                    except Exception as notif_error:
                        logger.error(f"‚ùå Erreur notification abonnement: {notif_error}")
                
                notification_thread = threading.Thread(target=run_subscription_notification)
                notification_thread.daemon = True
                notification_thread.start()
                logger.info(f"‚úÖ Abonnement activ√©: {telegram_id} = {subscription_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_activated: {e}")

def handle_subscription_cancelled(webhook_data):
    """Traiter l'annulation d'abonnement"""
    try:
        resource = webhook_data.get('resource', {})
        subscription_id = resource.get('id')
        
        success = db.cancel_subscription(subscription_id)
        
        if success:
            logger.info(f"‚úÖ Abonnement annul√©: {subscription_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_cancelled: {e}")

def handle_subscription_payment_completed(webhook_data):
    """Traiter un paiement d'abonnement compl√©t√©"""
    try:
        resource = webhook_data.get('resource', {})
        amount = Decimal(resource.get('amount', {}).get('total', '0'))
        subscription_id = resource.get('billing_agreement_id')
        
        # R√©cup√©rer l'utilisateur depuis l'abonnement
        telegram_id = get_telegram_id_from_subscription(subscription_id)
        
        if telegram_id:
            # Enregistrer le paiement r√©current
            success = db.record_payment(
                telegram_id=telegram_id,
                amount=amount,
                payment_type='subscription',
                paypal_subscription_id=subscription_id
            )
            
            if success:
                # Notifier le renouvellement (compatible Flask)
                def run_renewal_notification():
                    try:
                        asyncio.run(notify_subscription_renewal(telegram_id, amount))
                    except Exception as notif_error:
                        logger.error(f"‚ùå Erreur notification renouvellement: {notif_error}")
                
                notification_thread = threading.Thread(target=run_renewal_notification)
                notification_thread.daemon = True
                notification_thread.start()
                logger.info(f"‚úÖ Paiement abonnement trait√©: {telegram_id} = {amount} CHF")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_payment_completed: {e}")

def extract_telegram_id_from_payment(resource):
    """Extraire telegram_id depuis les donn√©es de paiement"""
    try:
        # Chercher dans les items
        for item in resource.get('item_list', {}).get('items', []):
            sku = item.get('sku', '')
            if sku.startswith('dino_monthly_'):
                return int(sku.replace('dino_monthly_', ''))
        return None
    except:
        return None

def extract_telegram_id_from_subscription(resource):
    """Extraire telegram_id depuis les donn√©es d'abonnement"""
    try:
        description = resource.get('description', '')
        # Chercher un pattern comme "pour 123456789"
        import re
        match = re.search(r'pour (\d+)', description)
        if match:
            return int(match.group(1))
        return None
    except:
        return None

def get_telegram_id_from_subscription(subscription_id):
    """R√©cup√©rer telegram_id depuis l'ID d'abonnement"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT telegram_id FROM subscriptions 
                WHERE paypal_subscription_id = %s
            """ if db.is_postgres else """
                SELECT telegram_id FROM subscriptions 
                WHERE paypal_subscription_id = ?
            """, (subscription_id,))
            
            result = cursor.fetchone()
            if result:
                # G√©rer les dictionnaires (PostgreSQL) et les tuples (SQLite)
                if isinstance(result, dict):
                    return result['telegram_id']
                else:
                    return result[0]
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur get_telegram_id_from_subscription: {e}")
        return None

# =============================================================================
# BOT TELEGRAM
# =============================================================================

async def notify_payment_success(telegram_id: int, amount: Decimal, payment_type: str):
    """Notifier le succ√®s d'un paiement et recalculer les gains"""
    try:
        if payment_type == 'abonnement':
            message = f"‚úÖ **Abonnement Activ√© !**\n\n"
            message += f"üí∞ **Montant :** {amount} CHF/mois\n"
            message += f"üîÑ **Type :** Abonnement mensuel automatique\n"
            message += f"üìÖ **Prochain pr√©l√®vement :** {(datetime.now() + timedelta(days=30)).strftime('%d/%m/%Y')}\n\n"
            message += f"üéÆ **Acc√®s activ√© pour le jeu !**\n"
            message += f"üîó Jouez ici : {GAME_URL}\n\n"
            message += f"‚ÑπÔ∏è Vous pouvez annuler votre abonnement √† tout moment via /cancel_subscription"
        else:
            message = f"‚úÖ **Paiement Confirm√© !**\n\n"
            message += f"üí∞ **Montant :** {amount} CHF\n"
            message += f"üìÖ **Valable jusqu'au :** {datetime.now().replace(day=1).replace(month=datetime.now().month+1 if datetime.now().month < 12 else 1, year=datetime.now().year+1 if datetime.now().month == 12 else datetime.now().year).strftime('%d/%m/%Y')}\n\n"
            message += f"üéÆ **Acc√®s activ√© pour ce mois !**\n"
            message += f"üîó Jouez ici : {GAME_URL}\n\n"
            message += f"üí° Pour un acc√®s permanent, choisissez l'abonnement mensuel avec /payment"
        
        # Calculer et afficher les nouveaux gains
        current_month = datetime.now().strftime('%Y-%m')
        prize_info = db.calculate_monthly_prizes(current_month)
        
        message += f"\n\nüèÜ **CAGNOTTE MISE √Ä JOUR !**\n"
        message += f"üí∞ **Total : {prize_info['total_amount']:.2f} CHF** ({prize_info['total_players']} joueurs)\n"
        message += f"ü•á 1er : {prize_info['prizes']['first']:.2f} CHF\n"
        message += f"ü•à 2e : {prize_info['prizes']['second']:.2f} CHF\n"
        message += f"ü•â 3e : {prize_info['prizes']['third']:.2f} CHF\n\n"
        message += f"üéØ **Jouez maintenant pour remporter ces prix !**"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                
            )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification paiement: {e}")

async def notify_subscription_renewal(telegram_id: int, amount: Decimal):
    """Notifier le renouvellement d'abonnement"""
    try:
        message = f"üîÑ **Abonnement Renouvel√© !**\n\n"
        message += f"üí∞ **Montant :** {amount} CHF\n"
        message += f"üìÖ **P√©riode :** {datetime.now().strftime('%B %Y')}\n"
        message += f"üìÖ **Prochain pr√©l√®vement :** {(datetime.now() + timedelta(days=30)).strftime('%d/%m/%Y')}\n\n"
        message += f"üéÆ **Votre acc√®s continue !**\n"
        message += f"üîó Jouez ici : {GAME_URL}"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                
            )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification renouvellement: {e}")

async def notify_new_score(telegram_id: int, score: int):
    """Notifier un nouveau score avec calcul automatique des gains"""
    try:
        # Obtenir la position et les gains de l'utilisateur
        position_info = db.get_user_position_and_prize(telegram_id)
        prize_info = position_info['prize_info']
        
        message = f"üéÆ **Nouveau Score Enregistr√© !**\n\n"
        message += f"üéØ **Score :** {score:,} points\n"
        
        if position_info['position']:
            message += f"üèÜ **Position :** {position_info['position']}/{position_info['total_players']}\n\n"
            
            # Afficher les gains potentiels
            if position_info['prize'] > 0:
                if position_info['position'] == 1:
                    message += f"ü•á **F√âLICITATIONS ! Vous √™tes 1er !**\n"
                    message += f"üí∞ **Gain actuel :** {position_info['prize']:.2f} CHF\n"
                elif position_info['position'] == 2:
                    message += f"ü•à **Excellent ! Vous √™tes 2e !**\n"
                    message += f"üí∞ **Gain actuel :** {position_info['prize']:.2f} CHF\n"
                elif position_info['position'] == 3:
                    message += f"ü•â **Bravo ! Vous √™tes 3e !**\n"
                    message += f"üí∞ **Gain actuel :** {position_info['prize']:.2f} CHF\n"
                
                message += f"\nüìä **Cagnotte actuelle :**\n"
                message += f"‚Ä¢ ü•á 1er : {prize_info['prizes']['first']:.2f} CHF\n"
                message += f"‚Ä¢ ü•à 2e : {prize_info['prizes']['second']:.2f} CHF\n"
                message += f"‚Ä¢ ü•â 3e : {prize_info['prizes']['third']:.2f} CHF\n"
                message += f"‚Ä¢ üë• {prize_info['total_players']} joueurs ({prize_info['total_amount']:.2f} CHF collect√©s)\n"
            else:
                message += f"üí° **Top 3 pour gagner !**\n"
                message += f"üéØ Battez le score du 3e pour gagner {prize_info['prizes']['third']:.2f} CHF !\n\n"
                message += f"üìä **Cagnotte actuelle :**\n"
                message += f"‚Ä¢ ü•á 1er : {prize_info['prizes']['first']:.2f} CHF\n"
                message += f"‚Ä¢ ü•à 2e : {prize_info['prizes']['second']:.2f} CHF\n"
                message += f"‚Ä¢ ü•â 3e : {prize_info['prizes']['third']:.2f} CHF\n"
        else:
            message += f"‚ùå **Non class√©** (paiement requis)\n"
            message += f"üí° Payez votre participation avec /payment pour √™tre class√© !\n"
        
        message += f"\nüéÆ Continuez √† jouer : {GAME_URL}"
        message += f"\nüèÜ Classement : /leaderboard"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                
            )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification nouveau score: {e}")

async def notify_new_score(telegram_id: int, score: int):
    """Notifier l'utilisateur de son nouveau score"""
    try:
        # V√©rifier si l'utilisateur a acc√®s
        has_access = db.check_user_access(telegram_id)
        
        if not has_access:
            message = f"üéÆ **Score enregistr√© !**\n\n"
            message += f"üìä **Score :** {score:,} points\n\n"
            message += f"‚ö†Ô∏è **Acc√®s limit√©** - Pour participer au concours mensuel :\n"
            message += f"üí∞ Payez {MONTHLY_PRICE_CHF} CHF avec /payment\n"
            message += f"üèÜ Tentez de gagner les prix mensuels !"
        else:
            message = f"üéÆ **Nouveau score enregistr√© !**\n\n"
            message += f"üìä **Score :** {score:,} points\n"
            message += f"üïí **Enregistr√© le :** {datetime.now().strftime('%d/%m/%Y √† %H:%M')}\n\n"
            message += f"üèÜ Tapez /leaderboard pour voir le classement !"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                
            )
    except Exception as e:
        logger.error(f"‚ùå Erreur notification score: {e}")

# Ancien handlers supprim√©s - remplac√©s par les fonctions manuelles

def setup_telegram_bot():
    """Configurer le bot Telegram avec approche minimaliste"""
    global telegram_app
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN manquant !")
        return None
    
    # Approche minimaliste - cr√©er seulement le Bot, pas d'Application
    from telegram import Bot
    telegram_app = Bot(token=TELEGRAM_BOT_TOKEN)
    
    logger.info("‚úÖ Bot Telegram configur√© (mode minimal)")
    return telegram_app

async def process_update_manually(bot, update):
    """Traiter manuellement les mises √† jour"""
    try:
        if update.message:
            # Messages texte
            text = update.message.text
            user = update.message.from_user
            
            # V√©rifier si l'utilisateur est en cours de configuration
            if user.id in user_states:
                state = user_states[user.id]
                
                if state == "waiting_for_name":
                    # Valider le nom
                    if text and len(text.strip()) >= 2 and len(text.strip()) <= 30:
                        # Sauvegarder le nom temporairement
                        display_name = text.strip()
                        
                        # Demander l'email PayPal
                        await bot.send_message(
                            chat_id=update.message.chat_id,
                            text="‚úÖ **Nom enregistr√© !**\n\n" +
                                 "**√âtape 2/2 : Email PayPal (optionnel)**\n\n" +
                                 "üìß Renseignez votre email PayPal pour recevoir vos gains en cas de victoire.\n\n" +
                                 "üí° Vous pouvez taper 'passer' si vous pr√©f√©rez le renseigner plus tard.\n\n" +
                                 "üìù Envoyez votre email PayPal :",
                            
                        )
                        user_states[user.id] = f"waiting_for_email:{display_name}"
                    else:
                        await bot.send_message(
                            chat_id=update.message.chat_id,
                            text="‚ùå **Nom invalide**\n\n" +
                                 "Le nom doit contenir entre 2 et 30 caract√®res.\n" +
                                 "üìù Envoyez-moi un nouveau nom :"
                        )
                    return
                
                elif state.startswith("waiting_for_email:"):
                    # R√©cup√©rer le nom depuis l'√©tat
                    display_name = state.split(":", 1)[1]
                    
                    # Valider l'email ou permettre de passer
                    paypal_email = None
                    text_lower = text.lower().strip()
                    if text_lower not in ['passer', 'skip', 'non', 'no', 'pass', 'rien', 'vide']:
                        # Validation simple de l'email
                        if '@' in text and '.' in text.split('@')[1] and len(text.strip()) > 5:
                            paypal_email = text.strip()
                        else:
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text="‚ùå **Email invalide**\n\n" +
                                     "Veuillez entrer un email valide ou tapez 'passer' pour ignorer.\n" +
                                     "üìù Email PayPal :"
                            )
                            return
                    
                    # Cr√©er/mettre √† jour l'utilisateur avec les nouvelles informations
                    logger.info(f"üîÑ Tentative sauvegarde profil: user={user.id}, nom='{display_name}', email='{paypal_email}'")
                    
                    # S'assurer que l'utilisateur existe en base
                    db_user = db.create_or_get_user(
                        telegram_id=user.id,
                        username=user.username,
                        first_name=user.first_name
                    )
                    
                    # Mettre √† jour le profil
                    success = db.update_user_profile(
                        telegram_id=user.id,
                        display_name=display_name,
                        paypal_email=paypal_email
                    )
                    
                    logger.info(f"üìä R√©sultat sauvegarde: success={success}")
                    if success:
                        # Nettoyer l'√©tat
                        del user_states[user.id]
                        logger.info(f"‚úÖ √âtat utilisateur nettoy√© pour {user.id}")
                        
                        # Message de confirmation et redirection vers le profil
                        text_response = "‚úÖ **Profil configur√© !**\n\n"
                        text_response += f"üè∑Ô∏è **Nom:** {display_name}\n"
                        if paypal_email:
                            text_response += f"üìß **Email PayPal:** {paypal_email}\n"
                        else:
                            text_response += f"üìß **Email PayPal:** Non renseign√©\n"
                        text_response += f"\nüéÆ **Votre profil est maintenant pr√™t !**\n"
                        text_response += f"üí∞ Utilisez /payment pour participer au concours."
                        
                        await bot.send_message(
                            chat_id=update.message.chat_id,
                            text=text_response,
                            
                        )
                        
                        # Afficher le profil complet
                        await handle_profile_command(bot, update.message)
                    else:
                        await bot.send_message(
                            chat_id=update.message.chat_id,
                            text="‚ùå Erreur lors de la sauvegarde. R√©essayez avec /profile"
                        )
                    return
                
                elif state == "edit_name":
                    # Modification du nom
                    if text and len(text.strip()) >= 2 and len(text.strip()) <= 30:
                        success = db.update_user_profile(user.id, display_name=text.strip())
                        del user_states[user.id]
                        
                        if success:
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text=f"‚úÖ **Nom modifi√© !**\n\nVotre nouveau nom : {text.strip()}"
                            )
                            # Revenir au profil
                            await handle_profile_command(bot, update.message)
                        else:
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text="‚ùå Erreur lors de la modification."
                            )
                    else:
                        await bot.send_message(
                            chat_id=update.message.chat_id,
                            text="‚ùå **Nom invalide**\n\nLe nom doit contenir entre 2 et 30 caract√®res.\nüìù Nouveau nom :"
                        )
                    return
                
                elif state == "edit_email":
                    # Modification de l'email
                    paypal_email = None
                    if text.lower().strip() not in ['supprimer', 'delete', 'remove']:
                        if '@' in text and '.' in text.split('@')[1]:
                            paypal_email = text.strip()
                        else:
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text="‚ùå **Email invalide**\n\nVeuillez entrer un email valide ou tapez 'supprimer' pour l'effacer.\nüìß Email PayPal :"
                            )
                            return
                    
                    success = db.update_user_profile(user.id, paypal_email=paypal_email)
                    del user_states[user.id]
                    
                    if success:
                        if paypal_email:
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text=f"‚úÖ **Email modifi√© !**\n\nNouveau email : {paypal_email}"
                            )
                        else:
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text="‚úÖ **Email supprim√© !**"
                            )
                        # Revenir au profil
                        await handle_profile_command(bot, update.message)
                    else:
                        await bot.send_message(
                            chat_id=update.message.chat_id,
                            text="‚ùå Erreur lors de la modification."
                        )
                    return
            
            # Commandes normales
            if text == '/start':
                await handle_start_command(bot, update.message)
            elif text == '/restore_admin' and user.id == ORGANIZER_CHAT_ID:
                # Commande d'urgence pour restaurer l'admin
                if user.id in user_states:
                    del user_states[user.id]
                
                db.update_user_profile(
                    telegram_id=user.id,
                    display_name="Nox (Admin)",
                    paypal_email="admin@dinochallenge.com"
                )
                
                db.record_payment(
                    telegram_id=user.id,
                    amount=Decimal('11.00'),
                    payment_type='admin_restore'
                )
                
                await bot.send_message(
                    chat_id=update.message.chat_id,
                    text="üö® **PROFIL ADMIN RESTAUR√â !**\n\n‚úÖ Acc√®s r√©tabli\n‚úÖ Profil configur√©\n‚úÖ √âtat nettoy√©"
                )
                return
            elif text == '/payment':
                await handle_payment_command(bot, update.message)
            elif text == '/leaderboard':
                await handle_leaderboard_command(bot, update.message)
            elif text == '/profile':
                await handle_profile_command(bot, update.message)
            elif text == '/setup':
                await force_user_setup(bot, update.message)
            elif text == '/cancel_subscription':
                await handle_cancel_subscription_command(bot, update.message)
            elif text == '/help':
                await handle_help_command(bot, update.message)
            elif text == '/support':
                await handle_support_command(bot, update.message)
            elif text == '/demo':
                await handle_demo_command(bot, update.message)
            elif text == '/restore_admin':
                # COMMANDE ADMIN URGENCE - Restaurer le profil admin
                if user.id == ORGANIZER_CHAT_ID:
                    await handle_restore_admin_command(bot, update.message)
                else:
                    await bot.send_message(
                        chat_id=update.message.chat_id,
                        text="‚ùå Commande r√©serv√©e √† l'administrateur."
                    )
            elif text == '/clean_payments':
                # COMMANDE ADMIN - Nettoyer les paiements de test
                if user.id == ORGANIZER_CHAT_ID:
                    deleted_count = db.clean_test_payments()
                    await bot.send_message(
                        chat_id=update.message.chat_id,
                        text=f"üßπ **Nettoyage effectu√© !**\n\n‚úÖ {deleted_count} paiements de test supprim√©s\nüí∞ Les prix sont maintenant corrects"
                    )
                else:
                    await bot.send_message(
                        chat_id=update.message.chat_id,
                        text="‚ùå Commande r√©serv√©e √† l'administrateur."
                    )
            # Gestion des boutons persistants (texte sans /)
            elif text in ["üéÆ Jouer", "Jouer", "JOUER"]:
                # Fonction de jeu sp√©cifique (pas /start)
                await handle_play_game(bot, update.message)
            elif text in ["üìä Classement", "üèÜ Classement", "Classement", "CLASSEMENT"]:
                await handle_leaderboard_command(bot, update.message)
            elif text in ["üë§ Profil", "Profil", "PROFIL"]:
                await handle_profile_command(bot, update.message)
            elif text in ["‚ùì Aide et r√®gles", "aide/r√®gle", "Aide", "AIDE", "R√®gles", "REGLES"]:
                await handle_help_command(bot, update.message)
            else:
                # Message non reconnu
                await bot.send_message(
                    chat_id=update.message.chat_id,
                    text="ü§ñ Commande non reconnue. Utilisez /start pour voir le menu."
                )
                
        elif update.callback_query:
            # Callbacks des boutons
            await handle_callback_query(bot, update.callback_query)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur traitement update: {e}")

async def start_user_setup(bot, message):
    """Commencer la configuration d'un nouvel utilisateur"""
    user = message.from_user
    user_states[user.id] = "waiting_for_name"
    
    text = f"üëã **Bienvenue {user.first_name} !**\n\n"
    text += f"üè∑Ô∏è **Configuration de votre profil**\n\n"
    text += f"Pour participer au Dino Challenge, nous avons besoin de quelques informations :\n\n"
    text += f"**√âtape 1/2 : Nom d'affichage**\n"
    text += f"Ce nom appara√Ætra dans le classement.\n\n"
    text += f"üìù Envoyez-moi le nom que vous voulez utiliser :"
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text
    )

async def force_user_setup(bot, message):
    """Forcer la reconfiguration d'un utilisateur (commande /setup)"""
    user = message.from_user
    user_states[user.id] = "waiting_for_name"
    
    text = f"üîß **Reconfiguration de votre profil**\n\n"
    text += f"üëã Salut {user.first_name} !\n\n"
    text += f"Vous allez pouvoir modifier vos informations :\n\n"
    text += f"**√âtape 1/2 : Nom d'affichage**\n"
    text += f"Ce nom appara√Ætra dans le classement.\n\n"
    text += f"üìù Envoyez-moi le nouveau nom que vous voulez utiliser :"
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text
    )

async def handle_callback_query(bot, callback_query):
    """G√©rer les callbacks des boutons"""
    try:
        await callback_query.answer()
        
        data = callback_query.data
        user = callback_query.from_user
        chat_id = callback_query.message.chat_id
        
        if data == "cancel_payment":
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text="‚ùå **Paiement annul√©.**",
                
            )
            return
        
        elif data.startswith("pay_once_"):
            telegram_id = int(data.replace("pay_once_", ""))
            payment_url = f"https://dinochallenge-bot.onrender.com/create-payment"
            
            text = f"üí≥ **Paiement Unique - {MONTHLY_PRICE_CHF} CHF**\n\n"
            text += f"üîó **Cliquez ici pour payer :**\n"
            text += f"[üí∞ Payer avec PayPal]({payment_url}?telegram_id={telegram_id})\n\n"
            text += f"üì± Vous serez redirig√© vers PayPal pour finaliser le paiement.\n"
            text += f"‚úÖ Une fois pay√©, votre acc√®s sera activ√© automatiquement !"
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text=text,
                
            )
        
        elif data.startswith("pay_subscription_"):
            telegram_id = int(data.replace("pay_subscription_", ""))
            subscription_url = f"https://dinochallenge-bot.onrender.com/create-subscription"
            
            text = f"üîÑ **Abonnement Mensuel - {MONTHLY_PRICE_CHF} CHF/mois**\n\n"
            text += f"üîó **Cliquez ici pour vous abonner :**\n"
            text += f"[üîÑ S'abonner avec PayPal]({subscription_url}?telegram_id={telegram_id})\n\n"
            text += f"üì± Vous serez redirig√© vers PayPal pour configurer l'abonnement.\n"
            text += f"‚úÖ Acc√®s permanent avec renouvellement automatique !\n"
            text += f"‚ùå Annulable √† tout moment avec /cancel_subscription"
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text=text
            )

        elif data == "profile":
            # Rediriger vers la fonction handle_profile_command
            await handle_profile_command(bot, callback_query.message)

        elif data == "leaderboard":
            # Afficher le classement avec gains en temps r√©el
            current_month = datetime.now().strftime('%Y-%m')
            leaderboard = db.get_leaderboard(current_month, 10)
            
            if not leaderboard:
                text = "üèÜ Aucun score enregistr√© ce mois-ci."
            else:
                # Calculer les prix du mois
                prize_info = db.calculate_monthly_prizes(current_month)
                
                text = f"üèÜ **CLASSEMENT - {datetime.now().strftime('%B %Y')}**\n\n"
                text += f"üí∞ **Cagnotte : {prize_info['total_amount']:.2f} CHF** ({prize_info['total_players']} joueurs)\n"
                text += f"ü•á 1er : {prize_info['prizes']['first']:.2f} CHF\n"
                text += f"ü•à 2e : {prize_info['prizes']['second']:.2f} CHF\n"
                text += f"ü•â 3e : {prize_info['prizes']['third']:.2f} CHF\n\n"
                
                medals = ['ü•á', 'ü•à', 'ü•â'] + ['üèÖ'] * 7
                
                for i, player in enumerate(leaderboard):
                    medal = medals[i] if i < len(medals) else 'üèÖ'
                    display_name = player['display_name']
                    score = player['best_score']
                    games = player['total_games']
                    
                    # Calculer le gain pour cette position
                    if i == 0:
                        prize = prize_info['prizes']['first']
                    elif i == 1:
                        prize = prize_info['prizes']['second']
                    elif i == 2:
                        prize = prize_info['prizes']['third']
                    else:
                        prize = 0
                    
                    text += f"{medal} **#{i+1} - {display_name}**\n"
                    text += f"   üìä {score:,} pts ({games} parties)"
                    
                    if prize > 0:
                        text += f" üí∞ {prize:.2f} CHF"
                    
                    text += f"\n\n"
                
                text += f"üéÆ Jouez ici : {GAME_URL}\n"
                text += f"üí° Les gains sont automatiquement recalcul√©s √† chaque nouveau paiement !"
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text=text,
                
            )

        elif data == "payment":
            await handle_payment_command(bot, callback_query.message)
        
        elif data == "help":
            # Afficher l'aide compl√®te
            await handle_help_command(bot, callback_query.message)
        
        elif data == "support":
            # Afficher le support technique
            await handle_support_command(bot, callback_query.message)
        
        elif data == "setup_profile":
            # D√©marrer la configuration pour un nouvel utilisateur
            await start_user_setup(bot, callback_query.message)
        
        elif data == "change_name" or data == "edit_name":
            user_states[user.id] = "edit_name"
            await bot.send_message(
                chat_id=chat_id,
                text="‚úèÔ∏è **Modifier votre nom d'affichage**\n\n" +
                     "üìù Envoyez-moi votre nouveau nom :",
                
            )
        
        elif data == "edit_email":
            user_states[user.id] = "edit_email"
            await bot.send_message(
                chat_id=chat_id,
                text="üìß **Modifier votre email PayPal**\n\n" +
                     "üìù Envoyez votre nouvel email PayPal ou tapez 'supprimer' pour l'effacer :",
                
            )
        
        elif data == "delete_profile":
            # Demander confirmation
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("üóëÔ∏è Confirmer la suppression", callback_data="confirm_delete")],
                [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_delete")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text="‚ö†Ô∏è **Suppression du profil**\n\n" +
                     "√ätes-vous s√ªr de vouloir supprimer votre profil ?\n" +
                     "Cette action est irr√©versible et supprimera :\n\n" +
                     "‚Ä¢ Votre nom d'affichage\n" +
                     "‚Ä¢ Votre email PayPal\n" +
                     "‚Ä¢ Tous vos scores\n" +
                     "‚Ä¢ Vos paiements\n\n" +
                     "‚ö†Ô∏è **Cette action ne peut pas √™tre annul√©e !**",
                reply_markup=reply_markup
            )
        
        elif data == "confirm_delete":
            # Supprimer le profil
            success = db.delete_user_profile(user.id)
            if success:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=callback_query.message.message_id,
                    text="‚úÖ **Profil supprim√©**\n\n" +
                         "Votre profil a √©t√© enti√®rement supprim√©.\n" +
                         "Utilisez /start pour cr√©er un nouveau profil.",
                    
                )
            else:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=callback_query.message.message_id,
                    text="‚ùå **Erreur**\n\nImpossible de supprimer le profil. Contactez l'support.",
                    
                )
        
        elif data == "cancel_delete":
            # Retourner au profil
            await handle_profile_command(bot, callback_query.message)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur callback query: {e}")
        await callback_query.answer("‚ùå Erreur lors du traitement")

async def handle_play_game(bot, message):
    """G√©rer le bouton Jouer (mode jeu sp√©cifique)"""
    user = message.from_user
    
    # Cr√©er ou r√©cup√©rer l'utilisateur
    db_user = db.create_or_get_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name
    )
    
    # V√©rifier l'acc√®s premium
    has_access = db.check_user_access(user.id)
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    if has_access:
        # Utilisateur premium - acc√®s direct au jeu
        text = f"""üéÆ **DINO CHALLENGE - MODE COMP√âTITION**

üëã Salut {user.first_name} !

‚úÖ **Statut :** Premium activ√©
üèÜ **Mode :** Comp√©tition (scores comptabilis√©s)

üéØ **Votre mission :**
‚Ä¢ √âvitez les obstacles en sautant
‚Ä¢ R√©alisez le meilleur score possible
‚Ä¢ Montez dans le classement mensuel
‚Ä¢ Gagnez des prix en CHF !

üöÄ Cliquez sur le bouton ci-dessous pour jouer :"""

        keyboard = [
            [InlineKeyboardButton("üéÆ JOUER MAINTENANT", url=f"{GAME_URL}?telegram_id={user.id}&mode=competition")],
            [
                InlineKeyboardButton("üèÜ Voir le classement", callback_data="leaderboard"),
                InlineKeyboardButton("üë§ Mon profil", callback_data="profile")
            ]
        ]
    else:
        # Utilisateur non-premium - proposition de paiement
        text = f"""üéÆ **DINO CHALLENGE**

üëã Salut {user.first_name} !

‚ö†Ô∏è **Acc√®s requis pour le mode comp√©tition**

üí∞ **Deux options de participation :**
‚Ä¢ üí≥ **Paiement unique** : {MONTHLY_PRICE_CHF} CHF pour le mois en cours
‚Ä¢ üîÑ **Abonnement mensuel** : {MONTHLY_PRICE_CHF} CHF/mois automatique

‚úÖ **Avantages :**
‚Ä¢ Scores comptabilis√©s dans le classement
‚Ä¢ √âligibilit√© aux prix mensuels
‚Ä¢ Acc√®s illimit√© tout le mois

üÜì **En attendant :** Vous pouvez essayer le mode d√©mo

"""

        keyboard = [
            [InlineKeyboardButton("üèÜ JOUER EN MODE CLASS√â", url=f"{GAME_URL}?telegram_id={message.from_user.id}&mode=competition")],
            [InlineKeyboardButton("üÜì Mode d√©mo (gratuit)", url=f"{GAME_URL}?mode=demo")],
            [
                InlineKeyboardButton("üèÜ Voir le classement", callback_data="leaderboard"),
                InlineKeyboardButton("‚ùì En savoir plus", callback_data="help")
            ]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

async def handle_play_command(bot, message):
    """G√©rer la commande de jeu (bouton Jouer)"""
    user = message.from_user
    
    # Cr√©er ou r√©cup√©rer l'utilisateur
    db_user = db.create_or_get_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name
    )
    
    # V√©rifier l'acc√®s
    has_access = db.check_user_access(user.id)
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    if has_access:
        text = f"""üéÆ **Pr√™t √† jouer au Dino Challenge !**

üëã Salut {user.first_name} !

‚úÖ Vous avez acc√®s au mode comp√©tition ce mois.

üèÜ **Objectif :** Faites le meilleur score possible !
üéØ **R√®gles :** √âvitez les obstacles, gagnez des points
üí∞ **Prix :** Top 3 du mois remportent la cagnotte

üöÄ Cliquez sur le bouton ci-dessous pour jouer :"""

        keyboard = [
            [InlineKeyboardButton("üéÆ JOUER EN MODE COMP√âTITION", url=f"{GAME_URL}?telegram_id={user.id}&mode=competition")],
            [
                InlineKeyboardButton("üèÜ Voir le classement", callback_data="leaderboard"),
                InlineKeyboardButton("üë§ Mon profil", callback_data="profile")
            ]
        ]
    else:
        text = f"""üéÆ **Rejoignez le Dino Challenge !**

üëã Salut {user.first_name} !

‚ö†Ô∏è Pour jouer en mode comp√©tition et gagner des prix, vous devez d'abord participer au concours ({MONTHLY_PRICE_CHF} CHF).

üÜì **En attendant :** Vous pouvez essayer le jeu en mode d√©mo
üí∞ **Pour concourir :** Payez votre participation mensuelle

"""

        keyboard = [
            [InlineKeyboardButton(f"üí∞ PARTICIPER ({MONTHLY_PRICE_CHF} CHF)", callback_data="payment")],
            [InlineKeyboardButton("üÜì Essayer en mode d√©mo", url=f"{GAME_URL}?mode=demo")],
            [
                InlineKeyboardButton("üèÜ Voir le classement", callback_data="leaderboard"),
                InlineKeyboardButton("‚ùì Aide et r√®gles", callback_data="help")
            ]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

async def handle_start_command(bot, message):
    """G√©rer la commande /start"""
    user = message.from_user
    
    # Cr√©er ou r√©cup√©rer l'utilisateur
    db_user = db.create_or_get_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name
    )
    
    # V√©rifier si l'utilisateur a besoin de configurer son profil
    # PROTECTION: Ne pas forcer la reconfiguration si l'utilisateur a d√©j√† pay√© ou a des scores
    if not db_user.get('display_name'):
        # V√©rifier si c'est vraiment un nouvel utilisateur
        has_access = db.check_user_access(user.id)
        user_scores = db.get_user_scores(user.id)
        
        # Si l'utilisateur a d√©j√† pay√© ou a des scores, r√©parer le profil au lieu de forcer la reconfiguration
        if has_access or (user_scores and len(user_scores) > 0):
            # R√âPARATION AUTOMATIQUE du profil existant
            logger.warning(f"üîß R√©paration profil utilisateur existant {user.id}")
            fallback_name = user.first_name or user.username or f"Joueur_{user.id}"
            db.update_user_profile(user.id, display_name=fallback_name)
            logger.info(f"‚úÖ Profil r√©par√© pour {user.id}: nom='{fallback_name}'")
        else:
            # Nouvel utilisateur r√©el - d√©marrer la configuration
            await start_user_setup(bot, message)
            return
    
    # V√©rifier l'acc√®s
    has_access = db.check_user_access(user.id)
    
    text = f"""ü¶ï **Bienvenue dans le Dino Challenge !**

üëã Salut {user.first_name} !

üéÆ **Le jeu Chrome Dino avec des vrais prix !**
üèÜ Concours mensuel avec redistribution des gains

üí∞ **Participation : {MONTHLY_PRICE_CHF} CHF**
‚Ä¢ Paiement unique pour le mois en cours
‚Ä¢ OU abonnement mensuel automatique

ü•á **Prix mensuels distribu√©s au top 3 :**
‚Ä¢ 1er place : 40% de la cagnotte
‚Ä¢ 2e place : 15% de la cagnotte  
‚Ä¢ 3e place : 5% de la cagnotte
(40% restants pour les frais d'organisation)

üìã **Commandes principales :**
/payment - üí∞ Participer au concours
/leaderboard - üèÜ Voir le classement
/profile - üë§ Mon profil
/setup - üîß Reconfigurer mon profil
/help - ‚ùì Aide compl√®te

"""
    
    # Cr√©er les boutons
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    if has_access:
        text += f"‚úÖ **Vous avez acc√®s ce mois !**\n"
        keyboard = [
            [
                InlineKeyboardButton("üéÆ JOUER (Mode Comp√©tition)", url=f"{GAME_URL}?telegram_id={user.id}&mode=competition"),
                InlineKeyboardButton("üÜì D√©mo Gratuite", url=f"{GAME_URL}?mode=demo")
            ],
            [
                InlineKeyboardButton("üë§ Mon Profil", callback_data="profile"),
                InlineKeyboardButton("üèÜ Classement", callback_data="leaderboard")
            ]
        ]
    else:
        text += f"‚ö†Ô∏è **Configurez votre profil puis payez pour participer**\n"
        keyboard = [
            [
                InlineKeyboardButton("üë§ Mon Profil", callback_data="profile"),
                InlineKeyboardButton("üí∞ Participer ({MONTHLY_PRICE_CHF} CHF)", callback_data="payment")
            ],
            [
                InlineKeyboardButton("ÔøΩ D√©mo Gratuite", url=f"{GAME_URL}?mode=demo"),
                InlineKeyboardButton("üèÜ Classement", callback_data="leaderboard")
            ]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Ajouter les boutons keyboard persistants (sous la barre d'√©criture)
    from telegram import ReplyKeyboardMarkup, KeyboardButton
    
    persistent_keyboard = [
        [KeyboardButton("üéÆ Jouer"), KeyboardButton("üìä Classement")],
        [KeyboardButton("üë§ Profil"), KeyboardButton("‚ùì Aide et r√®gles")]
    ]
    
    persistent_reply_markup = ReplyKeyboardMarkup(
        persistent_keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=False
    )
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )
    
    # Envoyer un message s√©par√© avec les boutons persistants
    await bot.send_message(
        chat_id=message.chat_id,
        text="üéØ **Menu rapide :**",
        reply_markup=persistent_reply_markup
    )

async def handle_payment_command(bot, message):
    """G√©rer la commande /payment"""
    user = message.from_user
    
    # V√©rifier si l'utilisateur a d√©j√† pay√© ce mois
    has_access = db.check_user_access(user.id)
    
    if has_access:
        text = f"‚úÖ **Vous avez d√©j√† acc√®s ce mois !**\n\n"
        text += f"üéÆ Jouez ici : {GAME_URL}\n"
        text += f"üèÜ Consultez le classement avec /leaderboard"
        
        await bot.send_message(
            chat_id=message.chat_id,
            text=text,
            
        )
        return
    
    # Proposer les options de paiement
    text = f"üí∞ **PARTICIPER AU DINO CHALLENGE**\n\n"
    text += f"üéØ **Choisissez votre option de paiement :**\n\n"
    text += f"**üí≥ Paiement Unique ({MONTHLY_PRICE_CHF} CHF)**\n"
    text += f"‚Ä¢ Acc√®s pour le mois en cours uniquement\n"
    text += f"‚Ä¢ √Ä renouveler chaque mois manuellement\n\n"
    text += f"**üîÑ Abonnement Mensuel ({MONTHLY_PRICE_CHF} CHF/mois)**\n"
    text += f"‚Ä¢ Acc√®s permanent avec renouvellement automatique\n"
    text += f"‚Ä¢ Annulable √† tout moment\n"
    text += f"‚Ä¢ Plus pratique, jamais d'interruption !\n\n"
    text += f"üèÜ **Prix mensuels distribu√©s au top 3 !**"
    
    # Cr√©er les boutons inline manuellement
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [
        [InlineKeyboardButton(f"üí≥ Paiement Unique - {MONTHLY_PRICE_CHF} CHF", callback_data=f"pay_once_{user.id}")],
        [InlineKeyboardButton(f"üîÑ Abonnement Mensuel - {MONTHLY_PRICE_CHF} CHF/mois", callback_data=f"pay_subscription_{user.id}")],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

async def handle_leaderboard_command(bot, message):
    """G√©rer la commande /leaderboard avec calcul des gains en temps r√©el"""
    try:
        current_month = datetime.now().strftime('%Y-%m')
        leaderboard = db.get_leaderboard(current_month, 10)
        
        if not leaderboard:
            await bot.send_message(
                chat_id=message.chat_id,
                text="üèÜ Aucun score enregistr√© ce mois-ci."
            )
            return
        
        # Calculer les prix du mois avec la vraie logique
        prize_info = db.calculate_monthly_prizes(current_month)
        
        text = f"üèÜ Classement {datetime.now().strftime('%B %Y')}\n\n"
        text += f"üí∞ Cagnotte totale : {prize_info['total_amount']:.2f} CHF\n"
        text += f"‚è∞ Fin du concours : Dans {31 - datetime.now().day} jour(s)\n\n"
        text += f"üèÖ R√©compenses :\n"
        text += f"ü•á 1er place : {prize_info['prizes']['first']:.2f} CHF (40%)\n"
        text += f"ü•à 2e place : {prize_info['prizes']['second']:.2f} CHF (15%)\n"
        text += f"ü•â 3e place : {prize_info['prizes']['third']:.2f} CHF (5%)\n\n"
        text += f"üìä Top 10 :\n"
        
        for i, player in enumerate(leaderboard):
            display_name = player['display_name']
            score = player['best_score']
            
            text += f"{i+1}. {display_name} - {score} pts"
            
            # Marquer l'utilisateur actuel
            if player.get('telegram_id') == message.from_user.id:
                text += " ‚Üê VOUS"
            
            text += f"\n"
        
        # Position de l'utilisateur
        user_rank = None
        for i, player in enumerate(leaderboard):
            if player.get('telegram_id') == message.from_user.id:
                user_rank = i + 1
                break
        
        if user_rank:
            text += f"\nüë§ Votre position : #{user_rank}\n"
            user_score = next((p['best_score'] for p in leaderboard if p.get('telegram_id') == message.from_user.id), 0)
            text += f"üèÖ Votre meilleur score : {user_score} pts\n"
        else:
            text += f"\nüë§ Votre position : Non class√©\n"
            text += f"üí° Jouez une partie pour appara√Ætre dans le classement !\n"
        
        # Statistiques suppl√©mentaires  
        total_players = len(leaderboard)
        text += f"\nüìà Statistiques :\n"
        text += f"‚Ä¢ Joueurs participants : {total_players}\n"
        text += f"‚Ä¢ Votre rang : #{user_rank if user_rank else 'N/A'}\n"
        
        if total_players > 0:
            avg_score = sum(p['best_score'] for p in leaderboard) / len(leaderboard)
            text += f"‚Ä¢ Score moyen : {avg_score:.1f} pts"
        
        await bot.send_message(
            chat_id=message.chat_id,
            text=text
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur affichage classement: {e}")
        await bot.send_message(
            chat_id=message.chat_id,
            text="‚ùå Erreur lors de la r√©cup√©ration du classement."
        )
async def handle_profile_command(bot, message):
    """G√©rer la commande /profile avec toutes les fonctionnalit√©s"""
    user = message.from_user
    db_user = db.get_user_profile(user.id)
    
    if not db_user:
        # Nouvel utilisateur - commencer la configuration
        await start_user_setup(bot, message)
        return
    
    # V√©rifier si le profil est complet
    # PROTECTION: Ne pas forcer la reconfiguration si l'utilisateur a d√©j√† pay√© ou a des scores
    if not db_user.get('display_name'):
        # V√©rifier si c'est vraiment un nouvel utilisateur
        has_access = db.check_user_access(user.id)
        user_scores = db.get_user_scores(user.id)
        
        # Si l'utilisateur a d√©j√† pay√© ou a des scores, r√©parer le profil au lieu de forcer la reconfiguration
        if has_access or (user_scores and len(user_scores) > 0):
            # R√âPARATION AUTOMATIQUE du profil existant
            logger.warning(f"üîß R√©paration profil utilisateur existant dans /profile {user.id}")
            fallback_name = user.first_name or user.username or f"Joueur_{user.id}"
            db.update_user_profile(user.id, display_name=fallback_name)
            logger.info(f"‚úÖ Profil r√©par√© dans /profile pour {user.id}: nom='{fallback_name}'")
            # Continuer avec le profil r√©par√©
            db_user = db.get_user_profile(user.id)  # Recharger les donn√©es
        else:
            # Nouvel utilisateur r√©el - commencer la configuration
            await start_user_setup(bot, message)
            return
    
    # R√©cup√©rer les informations du profil
    has_access = db.check_user_access(user.id)
    position_info = db.get_user_position_and_prize(user.id)
    
    display_name = db_user.get('display_name') or user.first_name or 'Anonyme'
    paypal_email = db_user.get('paypal_email') or 'Non renseign√©'
    
    # G√©rer la date d'inscription (peut √™tre datetime ou string)
    registration_date = db_user.get('registration_date')
    if registration_date:
        if hasattr(registration_date, 'strftime'):
            # Si c'est un objet datetime
            registration_str = registration_date.strftime('%Y-%m-%d')
        else:
            # Si c'est d√©j√† une string
            registration_str = str(registration_date)[:10]
    else:
        registration_str = 'Inconnue'
    
    text = f"üë§ **PROFIL - {display_name}**\n\n"
    text += f"üè∑Ô∏è **Nom d'affichage:** {display_name}\n"
    text += f"üìß **Email PayPal:** {paypal_email}\n"
    text += f"üÜî **ID Telegram:** {user.id}\n"
    text += f"üìÖ **Inscription:** {registration_str}\n\n"
    
    if has_access:
        text += f"‚úÖ **Statut:** Acc√®s actif ce mois\n\n"
        
        if position_info['position']:
            text += f"üèÜ **Position:** #{position_info['position']}/{position_info['total_players']}\n"
            if position_info['prize'] > 0:
                text += f"üí∞ **Gain potentiel:** {position_info['prize']:.2f} CHF\n"
        else:
            text += f"üéÆ **Jouez pour √™tre class√© !**\n"
    else:
        text += f"‚ùå **Statut:** Pas d'acc√®s ce mois\n"
        text += f"üí° Payez votre participation pour concourir\n"
    
    # Cr√©er les boutons du profil
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = []
    
    # Bouton jouer ou payer
    if has_access:
        keyboard.append([InlineKeyboardButton("üéÆ Jouer au Dino Challenge", url=f"{GAME_URL}?telegram_id={user.id}&mode=competition")])
    else:
        keyboard.append([InlineKeyboardButton(f"üí∞ Payer ma participation ({MONTHLY_PRICE_CHF} CHF)", callback_data="payment")])
    
    # Boutons de gestion du profil
    keyboard.append([
        InlineKeyboardButton("‚úèÔ∏è Modifier mon nom", callback_data="edit_name"),
        InlineKeyboardButton("üìß Modifier email PayPal", callback_data="edit_email")
    ])
    
    keyboard.append([InlineKeyboardButton("üóëÔ∏è Supprimer mon profil", callback_data="delete_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

async def handle_cancel_subscription_command(bot, message):
    """G√©rer la commande /cancel_subscription"""
    text = f"üîÑ **Gestion de l'abonnement**\n\n"
    text += f"Pour annuler votre abonnement PayPal :\n\n"
    text += f"1. Connectez-vous √† votre compte PayPal\n"
    text += f"2. Allez dans 'Paiements' ‚Üí 'Abonnements'\n"
    text += f"3. Trouvez 'Dino Challenge'\n"
    text += f"4. Cliquez sur 'Annuler l'abonnement'\n\n"
    text += f"üìû **Besoin d'aide ?** Contactez l'organisateur.\n"
    text += f"‚ö†Ô∏è L'acc√®s reste valide jusqu'√† la fin de la p√©riode pay√©e."
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        
    )

async def handle_help_command(bot, message):
    """G√©rer la commande /help"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    text = f"""‚ùì **AIDE & R√àGLES - DINO CHALLENGE**

ü¶ï **Bienvenue dans le Dino Challenge !**
Le concours mensuel du c√©l√®bre jeu Chrome Dino Runner !

üéÆ **Comment jouer :**
1. Payez {MONTHLY_PRICE_CHF} CHF avec /payment pour participer
2. Recevez le lien du jeu s√©curis√©
3. Utilisez ESPACE ou FL√àCHE HAUT pour sauter
4. √âvitez les obstacles le plus longtemps possible
5. Vos scores sont automatiquement enregistr√©s depuis le jeu

üö´ **NOUVEAU : Scores automatiques uniquement !**
‚Ä¢ Plus de soumission manuelle (anti-triche)
‚Ä¢ Maximum 5 parties par jour par joueur
‚Ä¢ Scores valid√©s automatiquement depuis le jeu

üí∞ **Options de participation :**
‚Ä¢ **Paiement unique :** {MONTHLY_PRICE_CHF} CHF - Acc√®s pour le mois en cours
‚Ä¢ **Abonnement :** {MONTHLY_PRICE_CHF} CHF/mois - Acc√®s permanent automatique

üèÜ **Prix du concours mensuel :**
Les gains sont calcul√©s sur la cagnotte totale :
‚Ä¢ ü•á **1√®re place :** 40% de la cagnotte
‚Ä¢ ü•à **2e place :** 15% de la cagnotte  
‚Ä¢ ü•â **3e place :** 5% de la cagnotte
‚Ä¢ ‚öôÔ∏è Organisation : 40% (frais techniques et gestion)

üí∏ **Paiement des gains :**
‚Ä¢ Versement automatique chaque 1er du mois
‚Ä¢ Transfert direct sur votre compte PayPal
‚Ä¢ Notification personnalis√©e aux gagnants

üìã **Commandes disponibles :**
/start - Menu principal avec boutons
/payment - Participer au concours
/leaderboard - Classement temps r√©el
/profile - G√©rer mon profil et PayPal
/support - Support technique direct
/cancel_subscription - Annuler l'abonnement
/help - Cette aide compl√®te

üîí **S√©curit√© & Fair-Play :**
‚Ä¢ Syst√®me anti-triche int√©gr√©
‚Ä¢ Validation des scores automatique
‚Ä¢ Limite de 5 parties/jour/joueur
‚Ä¢ Acc√®s premium v√©rifi√© pour chaque partie

üìÖ **Calendrier mensuel :**
‚Ä¢ Concours du 1er au dernier jour du mois
‚Ä¢ Notification des gagnants le 1er du mois suivant
‚Ä¢ Reset automatique du classement
‚Ä¢ Nouveau concours commence imm√©diatement

üÜò **Support technique :**
üë§ **@Lilith66store** (Organisateur officiel)
üìß Disponible 7j/7 pour toute question

‚ö° **Syst√®me automatis√© :**
‚Ä¢ Tout est g√©r√© automatiquement
‚Ä¢ Pas d'intervention manuelle n√©cessaire
‚Ä¢ Transparence totale des r√©sultats
‚Ä¢ Paiements rapides et s√©curis√©s

üéØ **Astuce :** Configurez votre email PayPal dans /profile pour recevoir vos gains automatiquement !"""

    # V√©rifier l'acc√®s utilisateur pour choisir le bon bouton de jeu
    has_access = db.check_user_access(message.from_user.id)
    
    # Ajouter des boutons pour actions rapides
    if has_access:
        # Utilisateur avec acc√®s premium - bouton vers mode comp√©tition
        keyboard = [
            [
                InlineKeyboardButton("üéÆ JOUER MAINTENANT (Mode Comp√©tition)", url=f"{GAME_URL}?telegram_id={message.from_user.id}&mode=competition"),
                InlineKeyboardButton("üÜì Mode D√©mo", url=f"{GAME_URL}?mode=demo")
            ],
            [
                InlineKeyboardButton("üí∞ Participer", callback_data="payment"),
                InlineKeyboardButton("üèÜ Classement", callback_data="leaderboard")
            ],
            [
                InlineKeyboardButton("üë§ Mon profil", callback_data="profile"),
                InlineKeyboardButton("üÜò Support", callback_data="support")
            ],
            [
                InlineKeyboardButton("ÔøΩ Retour au menu", callback_data="start")
            ]
        ]
    else:
        # Utilisateur sans acc√®s - bouton vers d√©mo + incitation √† payer
        keyboard = [
            [
                InlineKeyboardButton("üÜì Essayer en Mode D√©mo", url=f"{GAME_URL}?mode=demo"),
                InlineKeyboardButton("üí∞ D√©bloquer Mode Comp√©tition", callback_data="payment")
            ],
            [
                InlineKeyboardButton("üèÜ Classement", callback_data="leaderboard"),
                InlineKeyboardButton("üë§ Mon profil", callback_data="profile")
            ],
            [
                InlineKeyboardButton("üÜò Support", callback_data="support")
            ],
            [
                InlineKeyboardButton("üè† Retour au menu", callback_data="start")
            ]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

async def handle_demo_command(bot, message):
    """G√©rer la commande /demo"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    text = """üéÆ **MODE D√âMO - DINO CHALLENGE**

üÜì **Jouez gratuitement au Chrome Dino Runner !**

üéØ **Mode D√©mo :**
‚Ä¢ Acc√®s gratuit et illimit√©
‚Ä¢ Entra√Ænez-vous autant que vous voulez
‚Ä¢ Familiarisez-vous avec les commandes
‚Ä¢ Aucun score n'est comptabilis√© dans le concours

üèÜ **Pour participer au concours :**
‚Ä¢ Utilisez /payment pour d√©bloquer le mode comp√©tition
‚Ä¢ Vos scores seront alors comptabilis√©s automatiquement
‚Ä¢ Maximum 5 parties par jour en mode comp√©tition
‚Ä¢ Prix mensuels garantis !

üéÆ **Commandes du jeu :**
‚Ä¢ **ESPACE** ou **FL√àCHE HAUT** : Sauter
‚Ä¢ **FL√àCHE BAS** : S'accroupir (√©viter les oiseaux)

üöÄ **Pr√™t √† jouer en d√©mo ?**
Cliquez sur le bouton ci-dessous pour commencer !"""

    keyboard = [
        [
            InlineKeyboardButton("üéÆ JOUER EN MODE D√âMO", url=f"{GAME_URL}?mode=demo")
        ],
        [
            InlineKeyboardButton("üí∞ D√©bloquer Mode Comp√©tition", callback_data="payment"),
            InlineKeyboardButton("üèÜ Voir le Classement", callback_data="leaderboard")
        ],
        [
            InlineKeyboardButton("‚ùì Aide & R√®gles", callback_data="help"),
            InlineKeyboardButton("üè† Menu Principal", callback_data="start")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

async def handle_support_command(bot, message):
    """G√©rer la commande /support"""
    user = message.from_user
    
    text = f"""üÜò **SUPPORT TECHNIQUE - DINO CHALLENGE**

üëã Salut {user.first_name} !

‚ùì **Vous rencontrez un probl√®me ?**

‚Ä¢ Paiement non reconnu
‚Ä¢ Erreur technique du jeu  
‚Ä¢ Score non comptabilis√©
‚Ä¢ Question sur les r√®gles
‚Ä¢ Autre probl√®me

üìû **Contact direct :**
üë§ **@Lilith66store** (Support officiel)

üìß **Comment nous contacter :**
1. Cliquez sur le bouton ci-dessous
2. D√©crivez votre probl√®me en d√©tail
3. Joignez des captures d'√©cran si n√©cessaire

‚è∞ **D√©lai de r√©ponse :** 24-48h maximum
"""

    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("üìû Contacter le Support", url="https://t.me/Lilith66store")],
        [InlineKeyboardButton("üè† Retour au menu", callback_data="start")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        reply_markup=reply_markup
    )

# Suppression de handle_score_command - plus utilis√© (scores automatiques depuis le jeu)

async def notify_monthly_winners():
    """Notification automatique des gagnants en fin de mois"""
    try:
        # Obtenir les gagnants du mois pr√©c√©dent
        winners = db.get_monthly_winners()
        
        if not winners:
            logger.info("üìä Aucun gagnant trouv√© pour le mois pr√©c√©dent")
            return
        
        bot = setup_telegram_bot()
        if not bot:
            logger.error("‚ùå Impossible de configurer le bot pour les notifications")
            return
        
        month_name = datetime.now().replace(day=1) - timedelta(days=1)
        month_formatted = month_name.strftime('%B %Y')
        
        logger.info(f"üèÜ Notification des {len(winners)} gagnants de {month_formatted}")
        
        for winner in winners:
            try:
                # Obtenir le profil PayPal
                profile = db.get_user_profile_with_paypal(winner['telegram_id'])
                
                # Pr√©parer le message de f√©licitations
                if winner['position'] == 1:
                    emoji = "ü•á"
                    position_text = "1√®re place"
                elif winner['position'] == 2:
                    emoji = "ü•à" 
                    position_text = "2e place"
                else:
                    emoji = "ü•â"
                    position_text = "3e place"
                
                text = f"{emoji} **F√âLICITATIONS !**\n\n"
                text += f"üéâ Vous avez remport√© la **{position_text}** du concours Dino Challenge de **{month_formatted}** !\n\n"
                text += f"üìä **Votre score :** {winner['score']:,} points\n"
                text += f"üí∞ **Votre gain :** {winner['prize']:.2f} CHF\n\n"
                
                if profile and profile.get('paypal_email'):
                    text += f"üí≥ **Paiement PayPal**\n"
                    text += f"üìß Envoy√© √† : {profile['paypal_email']}\n"
                    text += f"‚è∞ D√©lai : 2-3 jours ouvrables\n\n"
                    text += f"‚úÖ Votre gain sera automatiquement transf√©r√© sur votre compte PayPal.\n"
                else:
                    text += f"‚ö†Ô∏è **Action requise :**\n"
                    text += f"Veuillez configurer votre email PayPal avec /profile pour recevoir votre gain.\n"
                    text += f"üìû Ou contactez le support : @Lilith66store\n\n"
                
                text += f"üéä Merci d'avoir particip√© au Dino Challenge !\n"
                text += f"üÜï Le nouveau concours a d√©j√† commenc√© - bonne chance !"
                
                # Envoyer la notification
                await bot.send_message(
                    chat_id=winner['telegram_id'],
                    text=text,
                    
                )
                
                logger.info(f"‚úÖ Notification envoy√©e √† {winner['display_name']} ({winner['position']}e place)")
                
                # Petite pause entre les notifications
                await asyncio.sleep(1)
                
            except Exception as notification_error:
                logger.error(f"‚ùå Erreur notification {winner['display_name']}: {notification_error}")
        
        logger.info(f"üéâ Toutes les notifications de fin de mois envoy√©es !")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification gagnants: {e}")

async def check_monthly_reset():
    """V√©rifier si c'est le 1er du mois pour reset et notifier"""
    now = datetime.now()
    
    # V√©rifier si c'est le 1er du mois
    if now.day == 1:
        # V√©rifier si le reset n'a pas d√©j√† √©t√© fait aujourd'hui
        reset_flag_file = f"/tmp/dino_reset_{now.strftime('%Y-%m')}.flag"
        
        if not os.path.exists(reset_flag_file):
            logger.info("üîÑ D√©but du processus de fin de mois...")
            
            # Notifier les gagnants du mois pr√©c√©dent
            await notify_monthly_winners()
            
            # Reset du classement (automatique via month_year)
            db.reset_monthly_leaderboard()
            
            # Cr√©er le fichier flag pour √©viter les doublons
            with open(reset_flag_file, 'w') as f:
                f.write(f"Reset effectu√© le {now.isoformat()}")
            
            logger.info("‚úÖ Processus de fin de mois termin√©")

async def notify_new_score(telegram_id: int, score: int):
    """Notifier l'utilisateur de son nouveau score"""
    try:
        bot = setup_telegram_bot()
        if not bot:
            return
        
        # Obtenir les informations du joueur
        position_info = db.get_user_position_and_prize(telegram_id)
        
        text = f"üéØ **Nouveau score enregistr√© !**\n\n"
        text += f"üìä **Score :** {score:,} points\n"
        
        if position_info['position']:
            text += f"üèÜ **Position :** {position_info['position']}/{position_info['total_players']}\n"
            if position_info['prize'] > 0:
                text += f"üí∞ **Gain potentiel :** {position_info['prize']:.2f} CHF\n"
        
        text += f"\nüéÆ Continuez √† jouer pour am√©liorer votre score !"
        
        await bot.send_message(
            chat_id=telegram_id,
            text=text,
            
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification score: {e}")

async def handle_message(bot, message):
    """G√©rer les messages texte (pour la configuration du profil)"""
    user = message.from_user
    text = message.text
    
    # G√©rer les √©tats de configuration utilisateur
    if hasattr(message.from_user, 'id') and message.from_user.id in user_states:
        state = user_states[message.from_user.id]
        
        if state == "edit_name":
            # Mise √† jour du nom d'affichage
            new_name = text.strip()[:50]  # Limiter √† 50 caract√®res
            
            success = db.update_display_name(message.from_user.id, new_name)
            
            if success:
                await bot.send_message(
                    chat_id=message.chat_id,
                    text=f"‚úÖ **Nom mis √† jour !**\n\nVotre nouveau nom : **{new_name}**",
                    
                )
            else:
                await bot.send_message(
                    chat_id=message.chat_id,
                    text="‚ùå Erreur lors de la mise √† jour du nom.",
                    
                )
            
            # Supprimer l'√©tat
            del user_states[message.from_user.id]
            
        elif state == "edit_paypal":
            # Mise √† jour de l'email PayPal
            paypal_email = text.strip()
            
            # Validation basique de l'email
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, paypal_email):
                await bot.send_message(
                    chat_id=message.chat_id,
                    text="‚ùå **Email invalide**\n\nVeuillez entrer une adresse email valide.",
                    
                )
                return
            
            success = db.update_user_profile(message.from_user.id, paypal_email=paypal_email)
            
            if success:
                await bot.send_message(
                    chat_id=message.chat_id,
                    text=f"‚úÖ **Email PayPal mis √† jour !**\n\nEmail : **{paypal_email}**\n\nVous pourrez recevoir vos gains automatiquement.",
                    
                )
            else:
                await bot.send_message(
                    chat_id=message.chat_id,
                    text="‚ùå Erreur lors de la mise √† jour de l'email PayPal.",
                    
                )
            
            # Supprimer l'√©tat
            del user_states[message.from_user.id]
    
    else:
        # Message g√©n√©rique pour les autres cas
        await bot.send_message(
            chat_id=message.chat_id,
            text="ü§ñ Utilisez /start pour voir le menu principal.",
            
        )

async def handle_restore_admin_command(bot, message):
    """Commande URGENCE pour restaurer le profil admin manuellement"""
    user = message.from_user
    
    # Double v√©rification s√©curit√© - ADMIN SEULEMENT
    if user.id != ORGANIZER_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat_id,
            text="‚ùå **Acc√®s refus√©** - Cette commande est r√©serv√©e √† l'administrateur.",
        )
        return
    
    try:
        # Nettoyer compl√®tement l'√©tat utilisateur
        if user.id in user_states:
            del user_states[user.id]
            logger.info(f"üßπ √âtat admin nettoy√©: {user.id}")
        
        # Forcer la recr√©ation du profil admin
        db_user = db.create_or_get_user(
            telegram_id=user.id,
            username=user.username or "admin",
            first_name=user.first_name or "Admin"
        )
        
        # Restaurer le profil complet avec tous les acc√®s
        success = db.update_user_profile(
            telegram_id=user.id,
            display_name="Nox (Admin)",
            paypal_email="admin@dinochallenge.com"
        )
        
        # Garantir l'acc√®s permanent
        payment_success = db.record_payment(
            telegram_id=user.id,
            amount=Decimal('11.00'),
            payment_type='admin_emergency_restore'
        )
        
        if success and payment_success:
            # Confirmer la restauration compl√®te
            await bot.send_message(
                chat_id=message.chat_id,
                text="üö® **RESTAURATION ADMIN R√âUSSIE** üö®\n\n" +
                     "‚úÖ Profil admin restaur√© compl√®tement\n" +
                     "‚úÖ Acc√®s permanent activ√©\n" +
                     "‚úÖ √âtat de configuration nettoy√©\n\n" +
                     "üè∑Ô∏è **Profil:** Nox (Admin)\n" +
                     "üí≥ **Statut:** Acc√®s permanent\n" +
                     "üìß **Email:** admin@dinochallenge.com\n\n" +
                     "Vous pouvez maintenant utiliser toutes les fonctions du bot normalement."
            )
            logger.info(f"üö® RESTAURATION ADMIN COMPL√àTE r√©ussie pour {user.id}")
        else:
            await bot.send_message(
                chat_id=message.chat_id,
                text="‚ùå **ERREUR lors de la restauration admin**\n\n" +
                     "Contactez le support technique d'urgence."
            )
            logger.error(f"‚ùå √âCHEC restauration admin pour {user.id}")
            
    except Exception as e:
        logger.error(f"‚ùå ERREUR CRITIQUE restauration admin: {e}")
        await bot.send_message(
            chat_id=message.chat_id,
            text="‚ùå **ERREUR CRITIQUE**\n\n√âchec de la restauration d'urgence."
        )

async def run_telegram_bot():
    """Ex√©cuter le bot Telegram avec protection anti-conflit et verrouillage"""
    
    # PROTECTION ANTI-DOUBLON : Cr√©er un fichier de verrouillage
    lock_file = None
    try:
        lock_file_path = os.path.join(tempfile.gettempdir(), 'dinochallenge_bot.lock')
        lock_file = open(lock_file_path, 'w')
        
        try:
            # Tentative de verrouillage exclusif (non-bloquant)
            fcntl.flock(lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            logger.info("üîí Verrou obtenu - Instance unique confirm√©e")
        except IOError:
            logger.error("üî• ARR√äT : Une autre instance du bot tourne d√©j√† !")
            logger.error("üí° Arr√™tez l'autre instance avant de red√©marrer")
            return
        
        bot = setup_telegram_bot()
        if bot:
            logger.info("ü§ñ D√©marrage du bot Telegram...")
            
            # √âTAPE 1: Nettoyer les anciennes mises √† jour de TOUTES les instances
            try:
                logger.info("üßπ Nettoyage RADICAL des mises √† jour...")
                
                # √âtape 1: Supprimer les webhooks (au cas o√π)
                try:
                    await bot.delete_webhook(drop_pending_updates=True)
                    logger.info("‚úÖ Webhooks supprim√©s")
                except Exception as webhook_error:
                    logger.warning(f"‚ö†Ô∏è Erreur suppression webhook: {webhook_error}")
                
                # √âtape 2: Utiliser un offset tr√®s √©lev√© pour ignorer toutes les anciennes mises √† jour
                await bot.get_updates(offset=-1, timeout=1, limit=1)
                logger.info("‚úÖ Toutes les anciennes mises √† jour ignor√©es")
                
                # √âtape 3: Attendre que toutes les autres connexions se ferment
                logger.info("‚è≥ Attente de fermeture des autres connexions...")
                await asyncio.sleep(15)  # Attendre plus longtemps pour √™tre s√ªr
                
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è Erreur nettoyage (peut √™tre normal): {cleanup_error}")
            
            # Configurer les commandes du bot (menu hamburger)
            from telegram import BotCommand
            commands = [
                BotCommand("start", "üè† Menu principal"),
                BotCommand("payment", "üí∞ Participer au concours"),
                BotCommand("leaderboard", "üèÜ Classement mensuel"),
                BotCommand("profile", "üë§ Mon profil"),
                BotCommand("cancel_subscription", "‚ùå Annuler l'abonnement"),
                BotCommand("support", "üÜò Support technique"),
                BotCommand("help", "‚ùì Aide et r√®gles"),
                BotCommand("demo", "üéÆ Mode D√©mo"),
            ]
            
            await bot.set_my_commands(commands)
            logger.info("‚úÖ Commandes du bot configur√©es")
            
            logger.info("üîÑ D√©marrage du polling avec verrouillage...")
            
            # Polling avec protection maximale contre les conflits
            offset = 0
            consecutive_409_errors = 0
            last_successful_update = datetime.now()
            
            while True:
                try:
                    # V√©rifier que le verrou est toujours actif
                    if not lock_file or lock_file.closed:
                        logger.error("üîí Verrou perdu - Arr√™t du bot")
                        break
                    
                    # R√©cup√©rer les mises √† jour avec timeout court
                    updates = await bot.get_updates(
                        offset=offset,
                        limit=100,
                        timeout=10  # Timeout plus court pour d√©tecter les conflits rapidement
                    )
                    
                    # Reset du compteur d'erreurs 409 si succ√®s
                    consecutive_409_errors = 0
                    last_successful_update = datetime.now()
                    
                    for update in updates:
                        offset = update.update_id + 1
                        # Traiter l'update manuellement
                        await process_update_manually(bot, update)
                    
                    # V√©rification du reset mensuel (une fois par jour)
                    await check_monthly_reset()
                    
                    # Petite pause pour √©viter la surcharge
                    if not updates:
                        await asyncio.sleep(2)
                        
                except Exception as poll_error:
                    error_message = str(poll_error)
                    
                    # Gestion sp√©cifique des erreurs 409 (conflit)
                    if "409" in error_message or "Conflict" in error_message:
                        consecutive_409_errors += 1
                        logger.error(f"‚ùå Conflit 409 d√©tect√© (tentative {consecutive_409_errors}): {poll_error}")
                        
                        if consecutive_409_errors >= 2:  # R√©duit √† 2 tentatives
                            logger.error("üî• ARR√äT IMM√âDIAT: Conflit persistant d√©tect√©!")
                            logger.error("üí° Autre instance toujours active - Arr√™tez tout sur Render")
                            break
                        
                        # Attendre plus longtemps en cas de conflit
                        await asyncio.sleep(30)
                    else:
                        logger.error(f"‚ùå Erreur polling: {poll_error}")
                        await asyncio.sleep(5)
                    
                    # V√©rifier si on est bloqu√© depuis trop longtemps
                    time_since_success = datetime.now() - last_successful_update
                    if time_since_success.total_seconds() > 300:  # 5 minutes
                        logger.error("üî• ARR√äT: Aucune mise √† jour r√©ussie depuis 5 minutes")
                        break
                        
    except Exception as e:
        logger.error(f"‚ùå Erreur bot Telegram: {e}")
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
    
    finally:
        # Lib√©rer le verrou
        if lock_file and not lock_file.closed:
            try:
                fcntl.flock(lock_file.fileno(), fcntl.LOCK_UN)
                lock_file.close()
                logger.info("üîì Verrou lib√©r√©")
            except:
                pass

def run_flask_app():
    """Ex√©cuter l'API Flask"""
    try:
        port = int(os.environ.get('PORT', 5000))
        logger.info(f"üåê D√©marrage de l'API Flask sur le port {port}...")
        
        # D√©marrer Flask directement (Gunicorn g√®re cela via wsgi.py s√©par√©ment)
        flask_app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur API Flask: {e}")

# =============================================================================
# MAIN - POINT D'ENTR√âE
# =============================================================================

def main():
    """Point d'entr√©e principal"""
    logger.info("ü¶ï D√©marrage du Dino Challenge Bot + API")
    
    # V√©rifier les variables d'environnement
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN manquant dans .env")
        return
    
    logger.info(f"üìä Base de donn√©es: {DATABASE_URL}")
    logger.info(f"üéÆ Jeu: {GAME_URL}")
    logger.info(f"üë§ Admin: {ORGANIZER_CHAT_ID}")
    
    # V√©rifier si on est en mode production Render
    is_render_production = os.environ.get('RENDER') == 'true'
    
    try:
        if is_render_production:
            logger.info("üè≠ Mode production Render d√©tect√©")
            
            # En production : d√©marrer les deux services
            # 1. D√©marrer Flask dans un thread pour les paiements
            flask_thread = threading.Thread(target=run_flask_app, daemon=True)
            flask_thread.start()
            logger.info("‚úÖ API Flask d√©marr√©e en arri√®re-plan pour les paiements")
            
            # 2. D√©marrer le bot Telegram (bloquant)
            logger.info("ü§ñ D√©marrage du bot Telegram en mode production")
            asyncio.run(run_telegram_bot())
            
        else:
            logger.info("üîß Mode d√©veloppement local")
            
            # D√©marrer Flask dans un thread s√©par√©
            flask_thread = threading.Thread(target=run_flask_app, daemon=True)
            flask_thread.start()
            logger.info("‚úÖ API Flask d√©marr√©e en arri√®re-plan")
            
            # D√©marrer le bot Telegram (bloquant)
            asyncio.run(run_telegram_bot())
        
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")

# =============================================================================
# COMMANDES D'ADMINISTRATION
# =============================================================================

@flask_app.route('/admin/grant-access/<int:telegram_id>', methods=['GET'])
def admin_grant_access(telegram_id):
    """Donner acc√®s manuellement √† un utilisateur (pour les cas de paiement non d√©tect√©)"""
    try:
        # V√©rifier l'autorisation (simple protection)
        auth_key = request.args.get('key')
        if auth_key != 'dino2025admin':  # Cl√© simple pour urgence
            return jsonify({'error': 'Non autoris√©'}), 403
        
        # Enregistrer un paiement manuel
        success = db.record_payment(
            telegram_id=telegram_id,
            amount=MONTHLY_PRICE_CHF,
            payment_type='manual_admin',
            paypal_payment_id=f'ADMIN_{int(time.time())}'
        )
        
        if success:
            logger.info(f"üîß ADMIN: Acc√®s accord√© manuellement √† {telegram_id}")
            return jsonify({
                'success': True,
                'message': f'Acc√®s accord√© √† l\'utilisateur {telegram_id}',
                'telegram_id': telegram_id
            })
        else:
            return jsonify({'error': 'Erreur lors de l\'enregistrement'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur admin grant access: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/admin/check-access/<int:telegram_id>', methods=['GET'])
def admin_check_access(telegram_id):
    """V√©rifier l'acc√®s d'un utilisateur"""
    try:
        has_access = db.check_user_access(telegram_id)
        user_profile = db.get_user_profile(telegram_id)
        
        # R√©cup√©rer les paiements de l'utilisateur
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM payments WHERE telegram_id = %s ORDER BY payment_date DESC
            """ if db.is_postgres else """
                SELECT * FROM payments WHERE telegram_id = ? ORDER BY payment_date DESC
            """, (telegram_id,))
            payments = [dict(row) for row in cursor.fetchall()]
        
        return jsonify({
            'telegram_id': telegram_id,
            'has_access': has_access,
            'user_profile': user_profile,
            'payments': payments
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur admin check access: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/admin/recent-payments', methods=['GET'])
def admin_recent_payments():
    """Voir les paiements r√©cents"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM payments 
                ORDER BY payment_date DESC 
                LIMIT 20
            """)
            payments = [dict(row) for row in cursor.fetchall()]
        
        return jsonify({
            'recent_payments': payments,
            'count': len(payments)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur admin recent payments: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/debug/user-status/<int:telegram_id>', methods=['GET'])
def debug_user_status(telegram_id):
    """Debug complet du statut utilisateur"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # R√©cup√©rer utilisateur
            cursor.execute("""
                SELECT * FROM users WHERE telegram_id = %s
            """ if db.is_postgres else """
                SELECT * FROM users WHERE telegram_id = ?
            """, (telegram_id,))
            user = cursor.fetchone()
            
            # R√©cup√©rer scores
            cursor.execute("""
                SELECT score, created_at, month_year FROM scores 
                WHERE telegram_id = %s ORDER BY created_at DESC LIMIT 10
            """ if db.is_postgres else """
                SELECT score, created_at, month_year FROM scores 
                WHERE telegram_id = ? ORDER BY created_at DESC LIMIT 10
            """, (telegram_id,))
            scores = cursor.fetchall()
            
            # R√©cup√©rer paiements  
            cursor.execute("""
                SELECT amount, status, payment_date, month_year FROM payments 
                WHERE telegram_id = %s ORDER BY payment_date DESC LIMIT 10
            """ if db.is_postgres else """
                SELECT amount, status, payment_date, month_year FROM payments 
                WHERE telegram_id = ? ORDER BY payment_date DESC LIMIT 10
            """, (telegram_id,))
            payments = cursor.fetchall()
            
            # V√©rifier acc√®s
            has_access = db.check_user_access(telegram_id)
            
            return jsonify({
                'telegram_id': telegram_id,
                'user': dict(user) if user else None,
                'scores': [dict(s) for s in scores] if scores else [],
                'payments': [dict(p) for p in payments] if payments else [],
                'has_access': has_access,
                'current_month': datetime.now().strftime('%Y-%m')
            })
            
    except Exception as e:
        logger.error(f"‚ùå Erreur debug user status: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/admin/reset-test-data', methods=['POST'])
def reset_test_data():
    """Supprimer les donn√©es de test du classement"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # Supprimer TOUS les scores pour test propre
            cursor.execute("DELETE FROM scores")
            
            conn.commit()
            
        logger.info("üßπ TOUS les scores supprim√©s pour test propre")
        return jsonify({
            'success': True,
            'message': 'TOUS les scores supprim√©s - classement remis √† z√©ro'
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur suppression scores: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/admin/reset-user-data', methods=['POST'])
def reset_user_data():
    """Supprimer les donn√©es d'un utilisateur sp√©cifique pour test"""
    try:
        data = request.get_json()
        telegram_id = data.get('telegram_id')
        
        if not telegram_id:
            return jsonify({'error': 'telegram_id requis'}), 400
            
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # Supprimer les scores de l'utilisateur
            cursor.execute("""
                DELETE FROM scores WHERE telegram_id = %s
            """ if db.is_postgres else """
                DELETE FROM scores WHERE telegram_id = ?
            """, (telegram_id,))
            
            conn.commit()
            
        logger.info(f"üßπ Scores supprim√©s pour utilisateur {telegram_id}")
        return jsonify({
            'success': True,
            'message': f'Scores supprim√©s pour utilisateur {telegram_id}'
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur suppression scores utilisateur: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    main()


