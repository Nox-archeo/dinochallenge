#!/usr/bin/env python3
"""
Dino Challenge Bot + API - Bot Telegram et API web pour le jeu Dino
Fonctionnalit√©s :
- Bot Telegram pour interaction utilisateurs
- API REST pour recevoir scores depuis le jeu
- Base de donn√©es PostgreSQL/SQLite
- Syst√®me de classement en temps r√©el
"""

import os
import logging
import asyncio
import re
import sqlite3
import traceback
import fcntl  # Pour le verrouillage de fichier
import tempfile
from datetime import datetime, timezone, timedelta
from typing import Optional, List, Dict
import json

# Imports pour le bot Telegram
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Imports pour l'API web
from flask import Flask, request, jsonify, render_template_string, redirect
from flask_cors import CORS
import threading
import time
import base64

# Imports pour PayPal
import paypalrestsdk
import hmac
import hashlib
import requests
from decimal import Decimal

# Imports pour la base de donn√©es
try:
    # Essayer psycopg3 en premier (plus r√©cent)
    import psycopg
    from psycopg.rows import dict_row
    PSYCOPG_VERSION = 3
except ImportError:
    try:
        # Fallback vers psycopg2
        import psycopg2 as psycopg
        from psycopg2.extras import RealDictCursor
        PSYCOPG_VERSION = 2
    except ImportError:
        raise ImportError("Installer psycopg ou psycopg2-binary")

import sqlite3
from urllib.parse import urlparse

# Configuration des logs
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Log de la version psycopg utilis√©e
if PSYCOPG_VERSION == 3:
    logger.info("üîπ Utilisation de psycopg3")
else:
    logger.info("üîπ Utilisation de psycopg2")

# Configuration depuis les variables d'environnement
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///dino_challenge.db')
ORGANIZER_CHAT_ID = int(os.getenv('ORGANIZER_CHAT_ID', '123456789'))
PORT = int(os.getenv('PORT', 5000))
GAME_URL = os.getenv('GAME_URL', 'https://nox-archeo.github.io/dinochallenge/')

# Configuration PayPal - MODE PRODUCTION
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')
PAYPAL_SECRET_KEY = os.getenv('PAYPAL_SECRET_KEY')
PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'live')  # 'live' par d√©faut = PRODUCTION
PAYPAL_WEBHOOK_URL = 'https://dinochallenge-bot.onrender.com/paypal-webhook'

# URLs PayPal API v2 - PRODUCTION
PAYPAL_BASE_URL = 'https://api-m.paypal.com' if PAYPAL_MODE == 'live' else 'https://api-m.sandbox.paypal.com'

# Prix en CHF (taxes incluses)
MONTHLY_PRICE_CHF = Decimal('11.00')

# Configuration PayPal SDK (pour la compatibilit√©) - MODE PRODUCTION
if PAYPAL_CLIENT_ID and PAYPAL_SECRET_KEY:
    paypalrestsdk.configure({
        "mode": PAYPAL_MODE,  # Utilise 'live' par d√©faut
        "client_id": PAYPAL_CLIENT_ID,
        "client_secret": PAYPAL_SECRET_KEY
    })
    logger.info(f"üè≠ PayPal configur√© en mode: {PAYPAL_MODE.upper()}")
    logger.info(f"üîó Base URL PayPal: {PAYPAL_BASE_URL}")

# Variables globales
telegram_app = None
flask_app = Flask(__name__)
CORS(flask_app)  # Permettre les requ√™tes CORS depuis le jeu

class DatabaseManager:
    """Gestionnaire de base de donn√©es - supporte PostgreSQL et SQLite"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.is_postgres = database_url.startswith('postgresql://') or database_url.startswith('postgres://')
        self.init_database()
    
    def get_connection(self):
        """Obtenir une connexion √† la base de donn√©es"""
        if self.is_postgres:
            if PSYCOPG_VERSION == 3:
                # psycopg3 syntax
                return psycopg.connect(self.database_url, row_factory=dict_row)
            else:
                # psycopg2 syntax (fallback)
                return psycopg.connect(self.database_url, cursor_factory=RealDictCursor)
        else:
            # SQLite
            db_path = self.database_url.replace('sqlite:///', '').replace('sqlite://', '')
            conn = sqlite3.connect(db_path)
            conn.row_factory = sqlite3.Row  # Pour avoir des dictionnaires
            return conn
    
    def init_database(self):
        """Initialiser les tables de la base de donn√©es"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    # Tables PostgreSQL
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS users (
                            id SERIAL PRIMARY KEY,
                            telegram_id BIGINT UNIQUE NOT NULL,
                            username VARCHAR(255),
                            first_name VARCHAR(255),
                            email VARCHAR(255),
                            paypal_email VARCHAR(255),
                            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            has_paid_current_month BOOLEAN DEFAULT FALSE,
                            total_attempts_today INTEGER DEFAULT 0,
                            last_attempt_date DATE
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS scores (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            telegram_id BIGINT NOT NULL,
                            score INTEGER NOT NULL,
                            game_date DATE DEFAULT CURRENT_DATE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            month_year VARCHAR(7) NOT NULL
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS payments (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            telegram_id BIGINT NOT NULL,
                            amount DECIMAL(10,2) NOT NULL,
                            currency VARCHAR(3) DEFAULT 'CHF',
                            payment_type VARCHAR(20) DEFAULT 'one_time',
                            payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            month_year VARCHAR(7) NOT NULL,
                            status VARCHAR(20) DEFAULT 'completed',
                            paypal_payment_id VARCHAR(255),
                            paypal_subscription_id VARCHAR(255)
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS subscriptions (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER REFERENCES users(id),
                            telegram_id BIGINT NOT NULL,
                            paypal_subscription_id VARCHAR(255) UNIQUE NOT NULL,
                            status VARCHAR(20) DEFAULT 'active',
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            cancelled_at TIMESTAMP,
                            next_billing_date DATE,
                            amount DECIMAL(10,2) NOT NULL,
                            currency VARCHAR(3) DEFAULT 'CHF'
                        )
                    """)
                else:
                    # Tables SQLite
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            telegram_id INTEGER UNIQUE NOT NULL,
                            username TEXT,
                            first_name TEXT,
                            email TEXT,
                            paypal_email TEXT,
                            registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                            has_paid_current_month BOOLEAN DEFAULT 0,
                            total_attempts_today INTEGER DEFAULT 0,
                            last_attempt_date DATE
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS scores (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            telegram_id INTEGER NOT NULL,
                            score INTEGER NOT NULL,
                            game_date DATE DEFAULT (DATE('now')),
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            month_year TEXT NOT NULL,
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS payments (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            telegram_id INTEGER NOT NULL,
                            amount REAL NOT NULL,
                            currency TEXT DEFAULT 'CHF',
                            payment_type TEXT DEFAULT 'one_time',
                            payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                            month_year TEXT NOT NULL,
                            status TEXT DEFAULT 'completed',
                            paypal_payment_id TEXT,
                            paypal_subscription_id TEXT,
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    """)
                    
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS subscriptions (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            telegram_id INTEGER NOT NULL,
                            paypal_subscription_id TEXT UNIQUE NOT NULL,
                            status TEXT DEFAULT 'active',
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            cancelled_at DATETIME,
                            next_billing_date DATE,
                            amount REAL NOT NULL,
                            currency TEXT DEFAULT 'CHF',
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    """)
                
                conn.commit()
                logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation base de donn√©es: {e}")
            raise
    
    def create_or_get_user(self, telegram_id: int, username: str = None, first_name: str = None) -> Dict:
        """Cr√©er ou r√©cup√©rer un utilisateur"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # V√©rifier si l'utilisateur existe
                cursor.execute("SELECT * FROM users WHERE telegram_id = %s" if self.is_postgres else 
                             "SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
                user = cursor.fetchone()
                
                if user:
                    return dict(user)
                
                # Cr√©er nouvel utilisateur
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO users (telegram_id, username, first_name, email)
                        VALUES (%s, %s, %s, %s) RETURNING *
                    """, (telegram_id, username, first_name, username + '@telegram.user' if username else None))
                    user = cursor.fetchone()
                else:
                    cursor.execute("""
                        INSERT INTO users (telegram_id, username, first_name, email)
                        VALUES (?, ?, ?, ?)
                    """, (telegram_id, username, first_name, username + '@telegram.user' if username else None))
                    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
                    user = cursor.fetchone()
                
                conn.commit()
                logger.info(f"‚úÖ Utilisateur cr√©√©: {telegram_id}")
                return dict(user)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation utilisateur: {e}")
            return {}
    
    def add_score(self, telegram_id: int, score: int) -> bool:
        """Ajouter un score pour un utilisateur"""
        try:
            # S'assurer que l'utilisateur existe
            user = self.create_or_get_user(telegram_id)
            if not user:
                return False
            
            current_month = datetime.now().strftime('%Y-%m')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO scores (user_id, telegram_id, score, month_year)
                        VALUES (%s, %s, %s, %s)
                    """, (user['id'], telegram_id, score, current_month))
                else:
                    cursor.execute("""
                        INSERT INTO scores (user_id, telegram_id, score, month_year)
                        VALUES (?, ?, ?, ?)
                    """, (user['id'], telegram_id, score, current_month))
                
                conn.commit()
                logger.info(f"‚úÖ Score ajout√©: {telegram_id} = {score}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur ajout score: {e}")
            return False
    
    def get_leaderboard(self, month_year: str = None, limit: int = 10) -> List[Dict]:
        """R√©cup√©rer le classement"""
        if not month_year:
            month_year = datetime.now().strftime('%Y-%m')
        
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        SELECT 
                            u.telegram_id,
                            u.first_name,
                            u.username,
                            MAX(s.score) as best_score,
                            COUNT(s.id) as total_games,
                            u.has_paid_current_month
                        FROM users u
                        JOIN scores s ON u.telegram_id = s.telegram_id
                        WHERE s.month_year = %s
                        GROUP BY u.telegram_id, u.first_name, u.username, u.has_paid_current_month
                        ORDER BY best_score DESC
                        LIMIT %s
                    """, (month_year, limit))
                else:
                    cursor.execute("""
                        SELECT 
                            u.telegram_id,
                            u.first_name,
                            u.username,
                            MAX(s.score) as best_score,
                            COUNT(s.id) as total_games,
                            u.has_paid_current_month
                        FROM users u
                        JOIN scores s ON u.telegram_id = s.telegram_id
                        WHERE s.month_year = ?
                        GROUP BY u.telegram_id, u.first_name, u.username, u.has_paid_current_month
                        ORDER BY best_score DESC
                        LIMIT ?
                    """, (month_year, limit))
                
                results = cursor.fetchall()
                return [dict(row) for row in results]
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration classement: {e}")
            return []
    
    def record_payment(self, telegram_id: int, amount: Decimal, payment_type: str = 'one_time', 
                      paypal_payment_id: str = None, paypal_subscription_id: str = None) -> bool:
        """Enregistrer un paiement"""
        try:
            user = self.create_or_get_user(telegram_id)
            if not user:
                return False
            
            current_month = datetime.now().strftime('%Y-%m')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO payments (user_id, telegram_id, amount, payment_type, month_year, 
                                            paypal_payment_id, paypal_subscription_id)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (user['id'], telegram_id, amount, payment_type, current_month, 
                         paypal_payment_id, paypal_subscription_id))
                else:
                    cursor.execute("""
                        INSERT INTO payments (user_id, telegram_id, amount, payment_type, month_year,
                                            paypal_payment_id, paypal_subscription_id)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, (user['id'], telegram_id, amount, payment_type, current_month,
                         paypal_payment_id, paypal_subscription_id))
                
                # Mettre √† jour le statut de paiement de l'utilisateur
                if self.is_postgres:
                    cursor.execute("""
                        UPDATE users SET has_paid_current_month = TRUE WHERE telegram_id = %s
                    """, (telegram_id,))
                else:
                    cursor.execute("""
                        UPDATE users SET has_paid_current_month = 1 WHERE telegram_id = ?
                    """, (telegram_id,))
                
                conn.commit()
                logger.info(f"‚úÖ Paiement enregistr√©: {telegram_id} = {amount} CHF ({payment_type})")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur enregistrement paiement: {e}")
            return False
    
    def create_subscription(self, telegram_id: int, paypal_subscription_id: str, 
                          amount: Decimal, next_billing_date: str = None) -> bool:
        """Cr√©er un abonnement"""
        try:
            user = self.create_or_get_user(telegram_id)
            if not user:
                return False
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        INSERT INTO subscriptions (user_id, telegram_id, paypal_subscription_id, 
                                                 amount, next_billing_date)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (paypal_subscription_id) DO UPDATE SET
                        status = 'active', next_billing_date = EXCLUDED.next_billing_date
                    """, (user['id'], telegram_id, paypal_subscription_id, amount, next_billing_date))
                else:
                    cursor.execute("""
                        INSERT OR REPLACE INTO subscriptions (user_id, telegram_id, paypal_subscription_id,
                                                            amount, next_billing_date)
                        VALUES (?, ?, ?, ?, ?)
                    """, (user['id'], telegram_id, paypal_subscription_id, amount, next_billing_date))
                
                conn.commit()
                logger.info(f"‚úÖ Abonnement cr√©√©: {telegram_id} = {paypal_subscription_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation abonnement: {e}")
            return False
    
    def cancel_subscription(self, paypal_subscription_id: str) -> bool:
        """Annuler un abonnement"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                if self.is_postgres:
                    cursor.execute("""
                        UPDATE subscriptions 
                        SET status = 'cancelled', cancelled_at = CURRENT_TIMESTAMP
                        WHERE paypal_subscription_id = %s
                    """, (paypal_subscription_id,))
                else:
                    cursor.execute("""
                        UPDATE subscriptions 
                        SET status = 'cancelled', cancelled_at = CURRENT_TIMESTAMP
                        WHERE paypal_subscription_id = ?
                    """, (paypal_subscription_id,))
                
                conn.commit()
                logger.info(f"‚úÖ Abonnement annul√©: {paypal_subscription_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur annulation abonnement: {e}")
            return False
    
    def check_user_access(self, telegram_id: int) -> bool:
        """V√©rifier si l'utilisateur a acc√®s ce mois-ci"""
        try:
            current_month = datetime.now().strftime('%Y-%m')
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # V√©rifier les paiements uniques pour ce mois
                cursor.execute("""
                    SELECT COUNT(*) FROM payments 
                    WHERE telegram_id = %s AND month_year = %s AND status = 'completed'
                """ if self.is_postgres else """
                    SELECT COUNT(*) FROM payments 
                    WHERE telegram_id = ? AND month_year = ? AND status = 'completed'
                """, (telegram_id, current_month))
                
                payment_count = cursor.fetchone()[0]
                if payment_count > 0:
                    return True
                
                # V√©rifier les abonnements actifs
                cursor.execute("""
                    SELECT COUNT(*) FROM subscriptions 
                    WHERE telegram_id = %s AND status = 'active'
                """ if self.is_postgres else """
                    SELECT COUNT(*) FROM subscriptions 
                    WHERE telegram_id = ? AND status = 'active'
                """, (telegram_id,))
                
                subscription_count = cursor.fetchone()[0]
                return subscription_count > 0
                
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification acc√®s: {e}")
            return False

# Instance globale du gestionnaire de base de donn√©es
db = DatabaseManager(DATABASE_URL)

# =============================================================================
# API WEB FLASK
# =============================================================================

@flask_app.route('/health', methods=['GET'])
def health_check():
    """Point de sant√© pour Render"""
    return jsonify({
        'status': 'ok',
        'bot': 'running',
        'database': 'connected',
        'timestamp': datetime.now().isoformat()
    })

@flask_app.route('/', methods=['GET'])
def home():
    """Page d'accueil avec informations du bot"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü¶ï Dino Challenge Bot</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .header { text-align: center; background: #4CAF50; color: white; padding: 20px; border-radius: 10px; }
            .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
            .endpoint { background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 3px; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ü¶ï Dino Challenge Bot</h1>
            <p>Bot Telegram + API Web pour le jeu Chrome Dino Runner</p>
        </div>
        
        <div class="section">
            <h2>üìä API Endpoints</h2>
            <div class="endpoint"><strong>POST /api/score</strong> - Soumettre un score</div>
            <div class="endpoint"><strong>GET /api/leaderboard</strong> - R√©cup√©rer le classement</div>
            <div class="endpoint"><strong>GET /health</strong> - Status du service</div>
        </div>
        
        <div class="section">
            <h2>üéÆ Jeu</h2>
            <p><a href="{{ game_url }}" target="_blank">Jouer au Dino Challenge ‚Üí</a></p>
        </div>
        
        <div class="section">
            <h2>üì± Bot Telegram</h2>
            <p>Recherchez <strong>@DinoChallenge_Bot</strong> sur Telegram pour participer !</p>
        </div>
    </body>
    </html>
    """
    return render_template_string(html, game_url=GAME_URL)

@flask_app.route('/api/score', methods=['POST'])
def submit_score():
    """Recevoir un score depuis le jeu Dino"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Aucune donn√©e re√ßue'}), 400
        
        telegram_id = data.get('telegram_id') or data.get('user_id')
        score = data.get('score')
        username = data.get('username')
        first_name = data.get('first_name')
        
        if not telegram_id or score is None:
            return jsonify({'error': 'telegram_id et score requis'}), 400
        
        # Convertir en entiers
        telegram_id = int(telegram_id)
        score = int(score)
        
        # Validation du score
        if score < 0 or score > 99999:
            return jsonify({'error': 'Score invalide'}), 400
        
        # Sauvegarder le score
        success = db.add_score(telegram_id, score)
        
        if success:
            # Notifier le bot Telegram si possible
            if telegram_app:
                asyncio.create_task(notify_new_score(telegram_id, score))
            
            return jsonify({
                'success': True,
                'message': 'Score enregistr√© avec succ√®s',
                'score': score,
                'telegram_id': telegram_id
            })
        else:
            return jsonify({'error': 'Erreur lors de l\'enregistrement'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur soumission score: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/api/leaderboard', methods=['GET'])
def get_leaderboard():
    """R√©cup√©rer le classement actuel"""
    try:
        month_year = request.args.get('month', datetime.now().strftime('%Y-%m'))
        limit = int(request.args.get('limit', 10))
        
        leaderboard = db.get_leaderboard(month_year, limit)
        
        # Ajouter les positions
        for i, player in enumerate(leaderboard):
            player['position'] = i + 1
        
        return jsonify({
            'leaderboard': leaderboard,
            'month': month_year,
            'total_players': len(leaderboard)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration classement: {e}")
        return jsonify({'error': str(e)}), 500

# =============================================================================
# FONCTIONS PAYPAL API V2
# =============================================================================

def get_paypal_access_token():
    """Obtenir un token d'acc√®s PayPal"""
    try:
        url = f"{PAYPAL_BASE_URL}/v1/oauth2/token"
        
        headers = {
            'Accept': 'application/json',
            'Accept-Language': 'en_US',
        }
        
        auth = (PAYPAL_CLIENT_ID, PAYPAL_SECRET_KEY)
        data = {'grant_type': 'client_credentials'}
        
        response = requests.post(url, headers=headers, data=data, auth=auth)
        
        if response.status_code == 200:
            return response.json().get('access_token')
        else:
            logger.error(f"‚ùå Erreur token PayPal: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur get_paypal_access_token: {e}")
        return None

def create_paypal_order(telegram_id: int, amount: Decimal, currency: str = 'CHF'):
    """Cr√©er une commande PayPal v2 (supporte cartes bancaires)"""
    try:
        access_token = get_paypal_access_token()
        if not access_token:
            logger.error("‚ùå Token PayPal manquant")
            return None
        
        url = f"{PAYPAL_BASE_URL}/v2/checkout/orders"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
            'PayPal-Request-Id': f'dino_{telegram_id}_{int(time.time())}'
        }
        
        # Donn√©es de la commande avec structure PayPal v2 correcte
        order_data = {
            "intent": "CAPTURE",
            "purchase_units": [{
                "reference_id": f"dino_monthly_{telegram_id}",
                "amount": {
                    "currency_code": currency,
                    "value": str(amount)
                },
                "description": f"Dino Challenge - Acc√®s mensuel pour {datetime.now().strftime('%B %Y')}"
            }],
            "payment_source": {
                "paypal": {
                    "experience_context": {
                        "brand_name": "Dino Challenge",
                        "locale": "fr-CH",
                        "landing_page": "BILLING",  # Page de facturation optimis√©e
                        "shipping_preference": "NO_SHIPPING",
                        "user_action": "PAY_NOW",
                        "payment_method_preference": "UNRESTRICTED",  # Permet tous types de paiements
                        "return_url": f"https://dinochallenge-bot.onrender.com/payment-success?telegram_id={telegram_id}",
                        "cancel_url": f"{GAME_URL}?payment=cancelled"
                    }
                }
            }
        }
        
        logger.info(f"üîÑ Cr√©ation commande PayPal pour {telegram_id} - {amount} {currency}")
        response = requests.post(url, headers=headers, json=order_data)
        
        if response.status_code == 201:
            order = response.json()
            logger.info(f"‚úÖ Commande PayPal cr√©√©e: {order['id']}")
            # V√©rifier que les liens utilisent l'environnement PRODUCTION
            for link in order.get('links', []):
                if link.get('rel') == 'approve':
                    approve_url = link.get('href', '')
                    if PAYPAL_MODE == 'live' and 'paypal.com' in approve_url and 'sandbox' not in approve_url:
                        logger.info(f"‚úÖ URL d'approbation PRODUCTION: {approve_url}")
                    elif PAYPAL_MODE == 'sandbox' and 'sandbox.paypal.com' in approve_url:
                        logger.info(f"‚úÖ URL d'approbation SANDBOX: {approve_url}")
                    else:
                        logger.warning(f"‚ö†Ô∏è URL d'approbation inattendue: {approve_url}")
            return order
        else:
            logger.error(f"‚ùå Erreur cr√©ation commande PayPal ({response.status_code}): {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur create_paypal_order: {e}")
        return None

# =============================================================================
# ENDPOINTS PAYPAL
# =============================================================================

@flask_app.route('/create-payment', methods=['GET', 'POST'])
def create_payment():
    """Cr√©er un paiement unique PayPal avec support carte bancaire"""
    try:
        # G√©rer les requ√™tes GET (depuis les liens Telegram)
        if request.method == 'GET':
            telegram_id = request.args.get('telegram_id')
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
            # Traiter comme une requ√™te POST avec les donn√©es de l'URL
            data = {'telegram_id': telegram_id}
        else:
            # Requ√™te POST normale
            data = request.get_json()
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
        
        # Cr√©er la commande PayPal v2 (supporte cartes bancaires)
        order = create_paypal_order(int(telegram_id), MONTHLY_PRICE_CHF)
        
        if order:
            # Trouver l'URL d'approbation
            approval_url = None
            for link in order.get('links', []):
                if link.get('rel') == 'approve':
                    approval_url = link.get('href')
                    break
            
            if approval_url:
                # Si c'est une requ√™te GET, rediriger directement vers PayPal
                if request.method == 'GET':
                    return redirect(approval_url)
                
                # Si c'est une requ√™te POST, retourner le JSON
                return jsonify({
                    'order_id': order['id'],
                    'approval_url': approval_url,
                    'telegram_id': telegram_id,
                    'status': order['status']
                })
            else:
                return jsonify({'error': 'URL d\'approbation non trouv√©e'}), 500
        else:
            return jsonify({'error': 'Erreur cr√©ation commande PayPal'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint create-payment: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/capture-payment', methods=['POST'])
def capture_payment():
    """Capturer un paiement PayPal apr√®s approbation"""
    try:
        data = request.get_json()
        order_id = data.get('order_id')
        
        if not order_id:
            return jsonify({'error': 'order_id requis'}), 400
        
        # Capturer le paiement
        access_token = get_paypal_access_token()
        if not access_token:
            return jsonify({'error': 'Erreur authentification PayPal'}), 500
        
        url = f"{PAYPAL_BASE_URL}/v2/checkout/orders/{order_id}/capture"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}',
        }
        
        response = requests.post(url, headers=headers, json={})
        
        if response.status_code == 201:
            capture_data = response.json()
            logger.info(f"‚úÖ Paiement captur√©: {order_id}")
            
            # Extraire les informations du paiement
            purchase_unit = capture_data.get('purchase_units', [{}])[0]
            capture = purchase_unit.get('payments', {}).get('captures', [{}])[0]
            amount = Decimal(capture.get('amount', {}).get('value', '0'))
            
            # Extraire telegram_id depuis reference_id
            reference_id = purchase_unit.get('reference_id', '')
            telegram_id = None
            if reference_id.startswith('dino_monthly_'):
                telegram_id = int(reference_id.replace('dino_monthly_', ''))
            
            if telegram_id and amount >= MONTHLY_PRICE_CHF:
                # Enregistrer le paiement
                success = db.record_payment(
                    telegram_id=telegram_id,
                    amount=amount,
                    payment_type='one_time',
                    paypal_payment_id=order_id
                )
                
                if success:
                    # Notifier l'utilisateur
                    if telegram_app:
                        asyncio.create_task(notify_payment_success(telegram_id, amount, 'paiement'))
                    
                    return jsonify({
                        'success': True,
                        'order_id': order_id,
                        'amount': str(amount),
                        'telegram_id': telegram_id
                    })
                else:
                    return jsonify({'error': 'Erreur enregistrement paiement'}), 500
            else:
                return jsonify({'error': 'Donn√©es de paiement invalides'}), 400
        else:
            logger.error(f"‚ùå Erreur capture PayPal: {response.text}")
            return jsonify({'error': 'Erreur capture paiement'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint capture-payment: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/payment-success', methods=['GET'])
def payment_success():
    """Page de confirmation de paiement avec capture automatique"""
    telegram_id = request.args.get('telegram_id')
    token = request.args.get('token')  # PayPal order ID
    
    if not telegram_id or not token:
        return "‚ùå Param√®tres manquants", 400
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü¶ï Paiement Dino Challenge</title>
        <meta charset="utf-8">
        <style>
            body {{ 
                font-family: Arial, sans-serif; 
                max-width: 600px; 
                margin: 0 auto; 
                padding: 20px;
                text-align: center;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }}
            .container {{
                background: rgba(255,255,255,0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
            }}
            .loading {{
                animation: spin 2s linear infinite;
                font-size: 3em;
                margin: 20px 0;
            }}
            @keyframes spin {{
                0% {{ transform: rotate(0deg); }}
                100% {{ transform: rotate(360deg); }}
            }}
            .success {{
                color: #4CAF50;
                font-size: 4em;
                margin: 20px 0;
            }}
            .error {{
                color: #f44336;
                font-size: 3em;
                margin: 20px 0;
            }}
            .btn {{
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 25px;
                font-size: 16px;
                cursor: pointer;
                text-decoration: none;
                display: inline-block;
                margin: 10px;
            }}
            .btn:hover {{
                background: #45a049;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü¶ï Dino Challenge</h1>
            <div id="loading">
                <div class="loading">‚ü≥</div>
                <h2>Finalisation de votre paiement...</h2>
                <p>Veuillez patienter, nous confirmons votre paiement.</p>
            </div>
            
            <div id="success" style="display: none;">
                <div class="success">‚úÖ</div>
                <h2>Paiement confirm√© !</h2>
                <p>Votre acc√®s au Dino Challenge est maintenant activ√© !</p>
                <a href="{GAME_URL}" class="btn">üéÆ Jouer maintenant</a>
                <p><small>Vous pouvez fermer cette page</small></p>
            </div>
            
            <div id="error" style="display: none;">
                <div class="error">‚ùå</div>
                <h2>Erreur de paiement</h2>
                <p id="error-message">Une erreur est survenue lors de la confirmation.</p>
                <a href="javascript:location.reload()" class="btn">üîÑ R√©essayer</a>
            </div>
        </div>
        
        <script>
            async function capturePayment() {{
                try {{
                    const response = await fetch('/capture-payment', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify({{
                            order_id: '{token}'
                        }})
                    }});
                    
                    const data = await response.json();
                    
                    if (data.success) {{
                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('success').style.display = 'block';
                        
                        // Rediriger vers le jeu apr√®s 3 secondes
                        setTimeout(() => {{
                            window.location.href = '{GAME_URL}?telegram_id={telegram_id}&payment=success';
                        }}, 3000);
                    }} else {{
                        throw new Error(data.error || 'Erreur inconnue');
                    }}
                }} catch (error) {{
                    console.error('Erreur:', error);
                    document.getElementById('loading').style.display = 'none';
                    document.getElementById('error').style.display = 'block';
                    document.getElementById('error-message').textContent = error.message;
                }}
            }}
            
            // Capturer le paiement automatiquement au chargement
            window.onload = function() {{
                setTimeout(capturePayment, 1000);
            }};
        </script>
    </body>
    </html>
    """
    
    return html

@flask_app.route('/create-subscription', methods=['GET', 'POST'])
def create_subscription():
    """Cr√©er un abonnement mensuel PayPal"""
    try:
        # G√©rer les requ√™tes GET (depuis les liens Telegram)
        if request.method == 'GET':
            telegram_id = request.args.get('telegram_id')
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
            # Traiter comme une requ√™te POST avec les donn√©es de l'URL
            data = {'telegram_id': telegram_id}
        else:
            # Requ√™te POST normale
            data = request.get_json()
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return jsonify({'error': 'telegram_id requis'}), 400
        
        # Cr√©er le plan d'abonnement (si pas d√©j√† cr√©√©)
        plan_id = create_billing_plan()
        if not plan_id:
            return jsonify({'error': 'Erreur cr√©ation plan abonnement'}), 500
        
        # Cr√©er l'accord d'abonnement
        billing_agreement = paypalrestsdk.BillingAgreement({
            "name": "Dino Challenge - Abonnement Mensuel",
            "description": f"Abonnement mensuel au Dino Challenge pour {telegram_id}",
            "start_date": (datetime.now() + timedelta(minutes=1)).isoformat() + "Z",
            "plan": {
                "id": plan_id
            },
            "payer": {
                "payment_method": "paypal"
            }
        })
        
        if billing_agreement.create():
            # Trouver l'URL d'approbation
            approval_url = None
            for link in billing_agreement.links:
                if link.rel == "approval_url":
                    approval_url = link.href
                    break
            
            # Si c'est une requ√™te GET, rediriger directement vers PayPal
            if request.method == 'GET':
                return redirect(approval_url)
            
            # Si c'est une requ√™te POST, retourner le JSON
            return jsonify({
                'agreement_id': billing_agreement.id,
                'approval_url': approval_url,
                'telegram_id': telegram_id
            })
        else:
            logger.error(f"‚ùå Erreur cr√©ation abonnement PayPal: {billing_agreement.error}")
            return jsonify({'error': 'Erreur cr√©ation abonnement'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint create-subscription: {e}")
        return jsonify({'error': str(e)}), 500

def create_billing_plan():
    """Cr√©er un plan de facturation PayPal"""
    try:
        billing_plan = paypalrestsdk.BillingPlan({
            "name": "Dino Challenge Monthly Plan",
            "description": "Plan mensuel pour l'acc√®s au Dino Challenge",
            "type": "INFINITE",
            "payment_definitions": [{
                "name": "Monthly Payment",
                "type": "REGULAR",
                "frequency": "MONTH",
                "frequency_interval": "1",
                "cycles": "0",  # 0 = infini
                "amount": {
                    "value": str(MONTHLY_PRICE_CHF),
                    "currency": "CHF"
                }
            }],
            "merchant_preferences": {
                "setup_fee": {
                    "value": "0",
                    "currency": "CHF"
                },
                "return_url": f"{GAME_URL}?subscription=success",
                "cancel_url": f"{GAME_URL}?subscription=cancelled",
                "auto_bill_amount": "YES",
                "initial_fail_amount_action": "CONTINUE",
                "max_fail_attempts": "3"
            }
        })
        
        if billing_plan.create():
            # Activer le plan
            if billing_plan.activate():
                return billing_plan.id
        
        logger.error(f"‚ùå Erreur cr√©ation plan: {billing_plan.error}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Erreur create_billing_plan: {e}")
        return None

@flask_app.route('/paypal-webhook', methods=['POST'])
def paypal_webhook():
    """Webhook PayPal pour traiter les √©v√©nements de paiement"""
    try:
        # R√©cup√©rer les donn√©es du webhook
        webhook_data = request.get_json()
        event_type = webhook_data.get('event_type')
        
        logger.info(f"üîî Webhook PayPal re√ßu: {event_type}")
        
        # Traiter selon le type d'√©v√©nement
        if event_type == 'PAYMENT.SALE.COMPLETED':
            # Paiement unique compl√©t√©
            handle_payment_completed(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.CREATED':
            # Abonnement cr√©√©
            handle_subscription_created(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.ACTIVATED':
            # Abonnement activ√©
            handle_subscription_activated(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.CANCELLED':
            # Abonnement annul√©
            handle_subscription_cancelled(webhook_data)
            
        elif event_type == 'BILLING.SUBSCRIPTION.PAYMENT.COMPLETED':
            # Paiement d'abonnement compl√©t√©
            handle_subscription_payment_completed(webhook_data)
            
        return jsonify({'status': 'success'}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur webhook PayPal: {e}")
        return jsonify({'error': str(e)}), 500

def handle_payment_completed(webhook_data):
    """Traiter un paiement unique compl√©t√©"""
    try:
        resource = webhook_data.get('resource', {})
        payment_id = resource.get('id')
        amount = Decimal(resource.get('amount', {}).get('total', '0'))
        
        # Extraire telegram_id depuis la description ou les items
        telegram_id = extract_telegram_id_from_payment(resource)
        
        if telegram_id and amount >= MONTHLY_PRICE_CHF:
            # Enregistrer le paiement
            success = db.record_payment(
                telegram_id=telegram_id,
                amount=amount,
                payment_type='one_time',
                paypal_payment_id=payment_id
            )
            
            if success:
                # Notifier l'utilisateur
                asyncio.create_task(notify_payment_success(telegram_id, amount, 'paiement'))
                logger.info(f"‚úÖ Paiement unique trait√©: {telegram_id} = {amount} CHF")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_payment_completed: {e}")

def handle_subscription_created(webhook_data):
    """Traiter la cr√©ation d'abonnement"""
    try:
        resource = webhook_data.get('resource', {})
        subscription_id = resource.get('id')
        
        logger.info(f"üìù Abonnement cr√©√©: {subscription_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_created: {e}")

def handle_subscription_activated(webhook_data):
    """Traiter l'activation d'abonnement"""
    try:
        resource = webhook_data.get('resource', {})
        subscription_id = resource.get('id')
        
        # Extraire telegram_id depuis les m√©tadonn√©es
        telegram_id = extract_telegram_id_from_subscription(resource)
        
        if telegram_id:
            success = db.create_subscription(
                telegram_id=telegram_id,
                paypal_subscription_id=subscription_id,
                amount=MONTHLY_PRICE_CHF
            )
            
            if success:
                # Enregistrer le premier paiement
                db.record_payment(
                    telegram_id=telegram_id,
                    amount=MONTHLY_PRICE_CHF,
                    payment_type='subscription',
                    paypal_subscription_id=subscription_id
                )
                
                # Notifier l'utilisateur
                asyncio.create_task(notify_payment_success(telegram_id, MONTHLY_PRICE_CHF, 'abonnement'))
                logger.info(f"‚úÖ Abonnement activ√©: {telegram_id} = {subscription_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_activated: {e}")

def handle_subscription_cancelled(webhook_data):
    """Traiter l'annulation d'abonnement"""
    try:
        resource = webhook_data.get('resource', {})
        subscription_id = resource.get('id')
        
        success = db.cancel_subscription(subscription_id)
        
        if success:
            logger.info(f"‚úÖ Abonnement annul√©: {subscription_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_cancelled: {e}")

def handle_subscription_payment_completed(webhook_data):
    """Traiter un paiement d'abonnement compl√©t√©"""
    try:
        resource = webhook_data.get('resource', {})
        amount = Decimal(resource.get('amount', {}).get('total', '0'))
        subscription_id = resource.get('billing_agreement_id')
        
        # R√©cup√©rer l'utilisateur depuis l'abonnement
        telegram_id = get_telegram_id_from_subscription(subscription_id)
        
        if telegram_id:
            # Enregistrer le paiement r√©current
            success = db.record_payment(
                telegram_id=telegram_id,
                amount=amount,
                payment_type='subscription',
                paypal_subscription_id=subscription_id
            )
            
            if success:
                # Notifier le renouvellement
                asyncio.create_task(notify_subscription_renewal(telegram_id, amount))
                logger.info(f"‚úÖ Paiement abonnement trait√©: {telegram_id} = {amount} CHF")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur handle_subscription_payment_completed: {e}")

def extract_telegram_id_from_payment(resource):
    """Extraire telegram_id depuis les donn√©es de paiement"""
    try:
        # Chercher dans les items
        for item in resource.get('item_list', {}).get('items', []):
            sku = item.get('sku', '')
            if sku.startswith('dino_monthly_'):
                return int(sku.replace('dino_monthly_', ''))
        return None
    except:
        return None

def extract_telegram_id_from_subscription(resource):
    """Extraire telegram_id depuis les donn√©es d'abonnement"""
    try:
        description = resource.get('description', '')
        # Chercher un pattern comme "pour 123456789"
        import re
        match = re.search(r'pour (\d+)', description)
        if match:
            return int(match.group(1))
        return None
    except:
        return None

def get_telegram_id_from_subscription(subscription_id):
    """R√©cup√©rer telegram_id depuis l'ID d'abonnement"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT telegram_id FROM subscriptions 
                WHERE paypal_subscription_id = %s
            """ if db.is_postgres else """
                SELECT telegram_id FROM subscriptions 
                WHERE paypal_subscription_id = ?
            """, (subscription_id,))
            
            result = cursor.fetchone()
            return result[0] if result else None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur get_telegram_id_from_subscription: {e}")
        return None

# =============================================================================
# BOT TELEGRAM
# =============================================================================

async def notify_payment_success(telegram_id: int, amount: Decimal, payment_type: str):
    """Notifier le succ√®s d'un paiement"""
    try:
        if payment_type == 'abonnement':
            message = f"‚úÖ **Abonnement Activ√© !**\n\n"
            message += f"üí∞ **Montant :** {amount} CHF/mois\n"
            message += f"üîÑ **Type :** Abonnement mensuel automatique\n"
            message += f"üìÖ **Prochain pr√©l√®vement :** {(datetime.now() + timedelta(days=30)).strftime('%d/%m/%Y')}\n\n"
            message += f"üéÆ **Acc√®s activ√© pour le jeu !**\n"
            message += f"üîó Jouez ici : {GAME_URL}\n\n"
            message += f"‚ÑπÔ∏è Vous pouvez annuler votre abonnement √† tout moment via /cancel_subscription"
        else:
            message = f"‚úÖ **Paiement Confirm√© !**\n\n"
            message += f"üí∞ **Montant :** {amount} CHF\n"
            message += f"üìÖ **Valable jusqu'au :** {datetime.now().replace(day=1).replace(month=datetime.now().month+1 if datetime.now().month < 12 else 1, year=datetime.now().year+1 if datetime.now().month == 12 else datetime.now().year).strftime('%d/%m/%Y')}\n\n"
            message += f"üéÆ **Acc√®s activ√© pour ce mois !**\n"
            message += f"üîó Jouez ici : {GAME_URL}\n\n"
            message += f"üí° Pour un acc√®s permanent, choisissez l'abonnement mensuel avec /payment"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification paiement: {e}")

async def notify_subscription_renewal(telegram_id: int, amount: Decimal):
    """Notifier le renouvellement d'abonnement"""
    try:
        message = f"üîÑ **Abonnement Renouvel√© !**\n\n"
        message += f"üí∞ **Montant :** {amount} CHF\n"
        message += f"üìÖ **P√©riode :** {datetime.now().strftime('%B %Y')}\n"
        message += f"üìÖ **Prochain pr√©l√®vement :** {(datetime.now() + timedelta(days=30)).strftime('%d/%m/%Y')}\n\n"
        message += f"üéÆ **Votre acc√®s continue !**\n"
        message += f"üîó Jouez ici : {GAME_URL}"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification renouvellement: {e}")

async def notify_new_score(telegram_id: int, score: int):
    """Notifier l'utilisateur de son nouveau score"""
    try:
        # V√©rifier si l'utilisateur a acc√®s
        has_access = db.check_user_access(telegram_id)
        
        if not has_access:
            message = f"üéÆ **Score enregistr√© !**\n\n"
            message += f"üìä **Score :** {score:,} points\n\n"
            message += f"‚ö†Ô∏è **Acc√®s limit√©** - Pour participer au concours mensuel :\n"
            message += f"üí∞ Payez 11 CHF avec /payment\n"
            message += f"üèÜ Tentez de gagner les prix mensuels !"
        else:
            message = f"üéÆ **Nouveau score enregistr√© !**\n\n"
            message += f"üìä **Score :** {score:,} points\n"
            message += f"üïí **Enregistr√© le :** {datetime.now().strftime('%d/%m/%Y √† %H:%M')}\n\n"
            message += f"üèÜ Tapez /leaderboard pour voir le classement !"
        
        if telegram_app:
            await telegram_app.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"‚ùå Erreur notification score: {e}")

# Ancien handlers supprim√©s - remplac√©s par les fonctions manuelles

def setup_telegram_bot():
    """Configurer le bot Telegram avec approche minimaliste"""
    global telegram_app
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN manquant !")
        return None
    
    # Approche minimaliste - cr√©er seulement le Bot, pas d'Application
    from telegram import Bot
    telegram_app = Bot(token=TELEGRAM_BOT_TOKEN)
    
    logger.info("‚úÖ Bot Telegram configur√© (mode minimal)")
    return telegram_app

async def process_update_manually(bot, update):
    """Traiter manuellement les mises √† jour"""
    try:
        if update.message:
            # Messages texte
            text = update.message.text
            user = update.message.from_user
            
            if text == '/start':
                await handle_start_command(bot, update.message)
            elif text == '/payment':
                await handle_payment_command(bot, update.message)
            elif text == '/leaderboard':
                await handle_leaderboard_command(bot, update.message)
            elif text == '/profile':
                await handle_profile_command(bot, update.message)
            elif text == '/cancel_subscription':
                await handle_cancel_subscription_command(bot, update.message)
            elif text == '/help':
                await handle_help_command(bot, update.message)
                
        elif update.callback_query:
            # Callbacks des boutons
            await handle_callback_query(bot, update.callback_query)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur traitement update: {e}")

async def handle_start_command(bot, message):
    """G√©rer la commande /start"""
    user = message.from_user
    
    # Cr√©er ou r√©cup√©rer l'utilisateur
    db_user = db.create_or_get_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name
    )
    
    # V√©rifier l'acc√®s
    has_access = db.check_user_access(user.id)
    
    text = f"""ü¶ï **Bienvenue dans le Dino Challenge !**

üëã Salut {user.first_name} !

üéÆ **Le jeu Chrome Dino avec des vrais prix !**
üèÜ Concours mensuel avec redistribution des gains

üí∞ **Participation : 11 CHF**
‚Ä¢ Paiement unique pour le mois en cours
‚Ä¢ OU abonnement mensuel automatique

ü•á **Prix mensuels distribu√©s au top 3 :**
‚Ä¢ 1er place : 50% de la cagnotte
‚Ä¢ 2e place : 30% de la cagnotte  
‚Ä¢ 3e place : 20% de la cagnotte

üìã **Commandes principales :**
/payment - üí∞ Participer au concours
/leaderboard - üèÜ Voir le classement
/profile - üë§ Mon profil
/help - ‚ùì Aide compl√®te

"""
    
    if has_access:
        text += f"‚úÖ **Vous avez acc√®s ce mois !**\n"
        text += f"üîó **Jouez maintenant :** {GAME_URL}"
    else:
        text += f"‚ö†Ô∏è **Payez pour participer :** /payment\n"
        text += f"üéÆ **D√©mo gratuite :** {GAME_URL}"
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        parse_mode='Markdown'
    )

async def handle_payment_command(bot, message):
    """G√©rer la commande /payment"""
    user = message.from_user
    
    # V√©rifier si l'utilisateur a d√©j√† pay√© ce mois
    has_access = db.check_user_access(user.id)
    
    if has_access:
        text = f"‚úÖ **Vous avez d√©j√† acc√®s ce mois !**\n\n"
        text += f"üéÆ Jouez ici : {GAME_URL}\n"
        text += f"üèÜ Consultez le classement avec /leaderboard"
        
        await bot.send_message(
            chat_id=message.chat_id,
            text=text,
            parse_mode='Markdown'
        )
        return
    
    # Proposer les options de paiement
    text = f"üí∞ **PARTICIPER AU DINO CHALLENGE**\n\n"
    text += f"üéØ **Choisissez votre option de paiement :**\n\n"
    text += f"**üí≥ Paiement Unique (11 CHF)**\n"
    text += f"‚Ä¢ Acc√®s pour le mois en cours uniquement\n"
    text += f"‚Ä¢ √Ä renouveler chaque mois manuellement\n\n"
    text += f"**üîÑ Abonnement Mensuel (11 CHF/mois)**\n"
    text += f"‚Ä¢ Acc√®s permanent avec renouvellement automatique\n"
    text += f"‚Ä¢ Annulable √† tout moment\n"
    text += f"‚Ä¢ Plus pratique, jamais d'interruption !\n\n"
    text += f"üèÜ **Prix mensuels distribu√©s au top 3 !**"
    
    # Cr√©er les boutons inline manuellement
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [
        [InlineKeyboardButton("üí≥ Paiement Unique - 11 CHF", callback_data=f"pay_once_{user.id}")],
        [InlineKeyboardButton("üîÑ Abonnement Mensuel - 11 CHF/mois", callback_data=f"pay_subscription_{user.id}")],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_leaderboard_command(bot, message):
    """G√©rer la commande /leaderboard"""
    try:
        current_month = datetime.now().strftime('%Y-%m')
        leaderboard = db.get_leaderboard(current_month, 10)
        
        if not leaderboard:
            await bot.send_message(
                chat_id=message.chat_id,
                text="üèÜ Aucun score enregistr√© ce mois-ci."
            )
            return
        
        text = f"üèÜ **CLASSEMENT - {datetime.now().strftime('%B %Y')}**\n\n"
        
        medals = ['ü•á', 'ü•à', 'ü•â'] + ['üèÖ'] * 7
        
        for i, player in enumerate(leaderboard):
            medal = medals[i] if i < len(medals) else 'üèÖ'
            name = player['first_name'] or player['username'] or 'Joueur Anonyme'
            score = player['best_score']
            games = player['total_games']
            
            text += f"{medal} **#{i+1} - {name}**\n"
            text += f"   üìä {score:,} pts ({games} parties)\n\n"
        
        text += f"üéÆ Jouez ici : {GAME_URL}"
        
        await bot.send_message(
            chat_id=message.chat_id,
            text=text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur affichage classement: {e}")
        await bot.send_message(
            chat_id=message.chat_id,
            text="‚ùå Erreur lors de la r√©cup√©ration du classement."
        )

async def handle_profile_command(bot, message):
    """G√©rer la commande /profile"""
    user = message.from_user
    db_user = db.create_or_get_user(user.id, user.username, user.first_name)
    
    # R√©cup√©rer les stats de l'utilisateur
    current_month = datetime.now().strftime('%Y-%m')
    user_scores = []
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT score, created_at 
                FROM scores 
                WHERE telegram_id = %s AND month_year = %s 
                ORDER BY score DESC 
                LIMIT 5
            """ if db.is_postgres else """
                SELECT score, created_at 
                FROM scores 
                WHERE telegram_id = ? AND month_year = ? 
                ORDER BY score DESC 
                LIMIT 5
            """, (user.id, current_month))
            user_scores = cursor.fetchall()
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration profil: {e}")
    
    text = f"üë§ **PROFIL - {user.first_name}**\n\n"
    text += f"üÜî **ID Telegram:** {user.id}\n"
    text += f"üìß **Email:** {db_user.get('email', 'Non configur√©')}\n"
    text += f"üìÖ **Inscription:** {db_user.get('registration_date', 'Inconnue')}\n\n"
    
    if user_scores:
        text += f"üèÜ **TOP 5 DE VOS SCORES CE MOIS:**\n"
        for i, score_data in enumerate(user_scores, 1):
            score = dict(score_data)['score']
            text += f"   {i}. {score:,} points\n"
        text += f"\nüìä **Total parties:** {len(user_scores)}\n"
    else:
        text += "üéÆ **Aucun score ce mois-ci**\n"
        text += f"Jouez ici : {GAME_URL}\n"
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        parse_mode='Markdown'
    )

async def handle_cancel_subscription_command(bot, message):
    """G√©rer la commande /cancel_subscription"""
    text = f"üîÑ **Gestion de l'abonnement**\n\n"
    text += f"Pour annuler votre abonnement PayPal :\n\n"
    text += f"1. Connectez-vous √† votre compte PayPal\n"
    text += f"2. Allez dans 'Paiements' ‚Üí 'Abonnements'\n"
    text += f"3. Trouvez 'Dino Challenge'\n"
    text += f"4. Cliquez sur 'Annuler l'abonnement'\n\n"
    text += f"üìû **Besoin d'aide ?** Contactez l'organisateur.\n"
    text += f"‚ö†Ô∏è L'acc√®s reste valide jusqu'√† la fin de la p√©riode pay√©e."
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        parse_mode='Markdown'
    )

async def handle_help_command(bot, message):
    """G√©rer la commande /help"""
    text = """‚ùì **AIDE - DINO CHALLENGE**

üéÆ **Comment jouer :**
1. Payez 11 CHF avec /payment pour participer
2. Cliquez sur le lien du jeu
3. Utilisez ESPACE ou FL√àCHE HAUT pour sauter
4. √âvitez les obstacles le plus longtemps possible
5. Votre score est automatiquement enregistr√©

üí∞ **Options de paiement :**
‚Ä¢ **Paiement unique :** Acc√®s pour le mois en cours
‚Ä¢ **Abonnement :** Acc√®s permanent avec renouvellement automatique

üèÜ **Concours mensuel :**
Prix distribu√©s au top 3 de chaque mois :
‚Ä¢ ü•á 1er : 50% de la cagnotte
‚Ä¢ ü•à 2e : 30% de la cagnotte  
‚Ä¢ ü•â 3e : 20% de la cagnotte

üìã **Commandes :**
/start - Menu principal
/payment - Participer au concours
/leaderboard - Classement mensuel
/profile - Mon profil et statistiques
/cancel_subscription - Annuler l'abonnement
/help - Cette aide

üéØ **Support :**
Contactez l'organisateur pour toute question.
"""
    
    await bot.send_message(
        chat_id=message.chat_id,
        text=text,
        parse_mode='Markdown'
    )

async def handle_callback_query(bot, callback_query):
    """G√©rer les callbacks des boutons"""
    try:
        await bot.answer_callback_query(callback_query.id)
        
        data = callback_query.data
        
        if data == "cancel_payment":
            await bot.edit_message_text(
                chat_id=callback_query.message.chat_id,
                message_id=callback_query.message.message_id,
                text="‚ùå **Paiement annul√©.**",
                parse_mode='Markdown'
            )
            return
        
        if data.startswith("pay_once_"):
            telegram_id = int(data.replace("pay_once_", ""))
            payment_url = f"https://dinochallenge-bot.onrender.com/create-payment"
            
            text = f"üí≥ **Paiement Unique - 11 CHF**\n\n"
            text += f"üîó **Cliquez ici pour payer :**\n"
            text += f"[üí∞ Payer avec PayPal]({payment_url}?telegram_id={telegram_id})\n\n"
            text += f"üì± Vous serez redirig√© vers PayPal pour finaliser le paiement.\n"
            text += f"‚úÖ Une fois pay√©, votre acc√®s sera activ√© automatiquement !"
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat_id,
                message_id=callback_query.message.message_id,
                text=text,
                parse_mode='Markdown'
            )
        
        elif data.startswith("pay_subscription_"):
            telegram_id = int(data.replace("pay_subscription_", ""))
            subscription_url = f"https://dinochallenge-bot.onrender.com/create-subscription"
            
            text = f"üîÑ **Abonnement Mensuel - 11 CHF/mois**\n\n"
            text += f"üîó **Cliquez ici pour vous abonner :**\n"
            text += f"[üîÑ S'abonner avec PayPal]({subscription_url}?telegram_id={telegram_id})\n\n"
            text += f"üì± Vous serez redirig√© vers PayPal pour configurer l'abonnement.\n"
            text += f"‚úÖ Acc√®s permanent avec renouvellement automatique !\n"
            text += f"‚ùå Annulable √† tout moment avec /cancel_subscription"
            
            await bot.edit_message_text(
                chat_id=callback_query.message.chat_id,
                message_id=callback_query.message.message_id,
                text=text,
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"‚ùå Erreur callback query: {e}")

async def run_telegram_bot():
    """Ex√©cuter le bot Telegram avec protection anti-conflit et verrouillage"""
    
    # PROTECTION ANTI-DOUBLON : Cr√©er un fichier de verrouillage
    lock_file = None
    try:
        lock_file_path = os.path.join(tempfile.gettempdir(), 'dinochallenge_bot.lock')
        lock_file = open(lock_file_path, 'w')
        
        try:
            # Tentative de verrouillage exclusif (non-bloquant)
            fcntl.flock(lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            logger.info("üîí Verrou obtenu - Instance unique confirm√©e")
        except IOError:
            logger.error("üî• ARR√äT : Une autre instance du bot tourne d√©j√† !")
            logger.error("üí° Arr√™tez l'autre instance avant de red√©marrer")
            return
        
        bot = setup_telegram_bot()
        if bot:
            logger.info("ü§ñ D√©marrage du bot Telegram...")
            
            # √âTAPE 1: Nettoyer les anciennes mises √† jour de TOUTES les instances
            try:
                logger.info("üßπ Nettoyage RADICAL des mises √† jour...")
                
                # M√©thode 1: Utiliser un offset tr√®s √©lev√© pour ignorer toutes les anciennes mises √† jour
                await bot.get_updates(offset=-1, timeout=1, limit=1)
                logger.info("‚úÖ Toutes les anciennes mises √† jour ignor√©es")
                
                # M√©thode 2: Attendre que toutes les autres connexions se ferment
                logger.info("‚è≥ Attente de fermeture des autres connexions...")
                await asyncio.sleep(10)  # Attendre plus longtemps
                
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è Erreur nettoyage (peut √™tre normal): {cleanup_error}")
            
            # Configurer les commandes du bot
            from telegram import BotCommand
            commands = [
                BotCommand("start", "üè† Menu principal"),
                BotCommand("payment", "üí∞ Participer au concours"),
                BotCommand("leaderboard", "üèÜ Classement mensuel"),
                BotCommand("profile", "üë§ Mon profil"),
                BotCommand("cancel_subscription", "‚ùå Annuler l'abonnement"),
                BotCommand("help", "‚ùì Aide et r√®gles"),
            ]
            
            await bot.set_my_commands(commands)
            logger.info("‚úÖ Commandes du bot configur√©es")
            
            logger.info("üîÑ D√©marrage du polling avec verrouillage...")
            
            # Polling avec protection maximale contre les conflits
            offset = 0
            consecutive_409_errors = 0
            last_successful_update = datetime.now()
            
            while True:
                try:
                    # V√©rifier que le verrou est toujours actif
                    if not lock_file or lock_file.closed:
                        logger.error("üîí Verrou perdu - Arr√™t du bot")
                        break
                    
                    # R√©cup√©rer les mises √† jour avec timeout court
                    updates = await bot.get_updates(
                        offset=offset,
                        limit=100,
                        timeout=10  # Timeout plus court pour d√©tecter les conflits rapidement
                    )
                    
                    # Reset du compteur d'erreurs 409 si succ√®s
                    consecutive_409_errors = 0
                    last_successful_update = datetime.now()
                    
                    for update in updates:
                        offset = update.update_id + 1
                        # Traiter l'update manuellement
                        await process_update_manually(bot, update)
                    
                    # Petite pause pour √©viter la surcharge
                    if not updates:
                        await asyncio.sleep(2)
                        
                except Exception as poll_error:
                    error_message = str(poll_error)
                    
                    # Gestion sp√©cifique des erreurs 409 (conflit)
                    if "409" in error_message or "Conflict" in error_message:
                        consecutive_409_errors += 1
                        logger.error(f"‚ùå Conflit 409 d√©tect√© (tentative {consecutive_409_errors}): {poll_error}")
                        
                        if consecutive_409_errors >= 2:  # R√©duit √† 2 tentatives
                            logger.error("üî• ARR√äT IMM√âDIAT: Conflit persistant d√©tect√©!")
                            logger.error("üí° Autre instance toujours active - Arr√™tez tout sur Render")
                            break
                        
                        # Attendre plus longtemps en cas de conflit
                        await asyncio.sleep(30)
                    else:
                        logger.error(f"‚ùå Erreur polling: {poll_error}")
                        await asyncio.sleep(5)
                    
                    # V√©rifier si on est bloqu√© depuis trop longtemps
                    time_since_success = datetime.now() - last_successful_update
                    if time_since_success.total_seconds() > 300:  # 5 minutes
                        logger.error("üî• ARR√äT: Aucune mise √† jour r√©ussie depuis 5 minutes")
                        break
                        
    except Exception as e:
        logger.error(f"‚ùå Erreur bot Telegram: {e}")
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
    
    finally:
        # Lib√©rer le verrou
        if lock_file and not lock_file.closed:
            try:
                fcntl.flock(lock_file.fileno(), fcntl.LOCK_UN)
                lock_file.close()
                logger.info("üîì Verrou lib√©r√©")
            except:
                pass

def run_flask_app():
    """Ex√©cuter l'API Flask"""
    try:
        port = int(os.environ.get('PORT', 5000))
        logger.info(f"üåê D√©marrage de l'API Flask sur le port {port}...")
        
        # D√©marrer Flask directement (Gunicorn g√®re cela via wsgi.py s√©par√©ment)
        flask_app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur API Flask: {e}")

# =============================================================================
# MAIN - POINT D'ENTR√âE
# =============================================================================

def main():
    """Point d'entr√©e principal"""
    logger.info("ü¶ï D√©marrage du Dino Challenge Bot + API")
    
    # V√©rifier les variables d'environnement
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN manquant dans .env")
        return
    
    logger.info(f"üìä Base de donn√©es: {DATABASE_URL}")
    logger.info(f"üéÆ Jeu: {GAME_URL}")
    logger.info(f"üë§ Admin: {ORGANIZER_CHAT_ID}")
    
    # V√©rifier si on est en mode production Render
    is_render_production = os.environ.get('RENDER') == 'true'
    
    try:
        if is_render_production:
            logger.info("üè≠ Mode production Render d√©tect√©")
            
            # En production : d√©marrer les deux services
            # 1. D√©marrer Flask dans un thread pour les paiements
            flask_thread = threading.Thread(target=run_flask_app, daemon=True)
            flask_thread.start()
            logger.info("‚úÖ API Flask d√©marr√©e en arri√®re-plan pour les paiements")
            
            # 2. D√©marrer le bot Telegram (bloquant)
            logger.info("ü§ñ D√©marrage du bot Telegram en mode production")
            asyncio.run(run_telegram_bot())
            
        else:
            logger.info("üîß Mode d√©veloppement local")
            
            # D√©marrer Flask dans un thread s√©par√©
            flask_thread = threading.Thread(target=run_flask_app, daemon=True)
            flask_thread.start()
            logger.info("‚úÖ API Flask d√©marr√©e en arri√®re-plan")
            
            # D√©marrer le bot Telegram (bloquant)
            asyncio.run(run_telegram_bot())
        
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")

if __name__ == '__main__':
    main()


